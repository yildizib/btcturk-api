/*
 * BtcTurk API 3.0
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BtcTurkAp30);
  }
}(this, function(expect, BtcTurkAp30) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BtcTurkAp30.NotificationApi();
  });

  describe('(package)', function() {
    describe('NotificationApi', function() {
      describe('apiV3NotificationsAnnouncementGet', function() {
        it('should call apiV3NotificationsAnnouncementGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV3NotificationsAnnouncementGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV3NotificationsAnnouncementGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BtcTurkAp30.AnnouncementModelIPagedList);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV3NotificationsAnnouncementSlugGet', function() {
        it('should call apiV3NotificationsAnnouncementSlugGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV3NotificationsAnnouncementSlugGet call and complete the assertions
          /*

          instance.apiV3NotificationsAnnouncementSlugGet(slug, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BtcTurkAp30.AnnouncementDetailModelIPagedList);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV3NotificationsCountGet', function() {
        it('should call apiV3NotificationsCountGet successfully', function(done) {
          // TODO: uncomment apiV3NotificationsCountGet call and complete the assertions
          /*

          instance.apiV3NotificationsCountGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BtcTurkAp30.SystemNotificationCountModel);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV3NotificationsGet', function() {
        it('should call apiV3NotificationsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV3NotificationsGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV3NotificationsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BtcTurkAp30.SystemNotificationModelIPagedList);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV3NotificationsIdGet', function() {
        it('should call apiV3NotificationsIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV3NotificationsIdGet call and complete the assertions
          /*

          instance.apiV3NotificationsIdGet(Ä±d, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BtcTurkAp30.SystemNotificationContentModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV3NotificationsInitGet', function() {
        it('should call apiV3NotificationsInitGet successfully', function(done) {
          // TODO: uncomment apiV3NotificationsInitGet call and complete the assertions
          /*

          instance.apiV3NotificationsInitGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BtcTurkAp30.SystemNotificationContentModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV3NotificationsModulesGet', function() {
        it('should call apiV3NotificationsModulesGet successfully', function(done) {
          // TODO: uncomment apiV3NotificationsModulesGet call
          /*

          instance.apiV3NotificationsModulesGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV3NotificationsReadAllPost', function() {
        it('should call apiV3NotificationsReadAllPost successfully', function(done) {
          // TODO: uncomment apiV3NotificationsReadAllPost call
          /*

          instance.apiV3NotificationsReadAllPost(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV3NotificationsReadPost', function() {
        it('should call apiV3NotificationsReadPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV3NotificationsReadPost call
          /*
          var opts = {};

          instance.apiV3NotificationsReadPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV3NotificationsUnreadGet', function() {
        it('should call apiV3NotificationsUnreadGet successfully', function(done) {
          // TODO: uncomment apiV3NotificationsUnreadGet call and complete the assertions
          /*

          instance.apiV3NotificationsUnreadGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BtcTurkAp30.SystemNotificationCountModel);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
