/*
 * BtcTurk API 3.0
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {BugBountyNoticeRequestModel} from '../model/BugBountyNoticeRequestModel';
import {HallOfFrameResponseModel} from '../model/HallOfFrameResponseModel';
import {ReturnModel} from '../model/ReturnModel';

/**
* BugBounty service.
* @module api/BugBountyApi
* @version 3.0
*/
export class BugBountyApi {

    /**
    * Constructs a new BugBountyApi. 
    * @alias module:api/BugBountyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV3BugBountiesHallOfFameGet operation.
     * @callback moduleapi/BugBountyApi~apiV3BugBountiesHallOfFameGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HallOfFrameResponseModel>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/BugBountyApi~apiV3BugBountiesHallOfFameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV3BugBountiesHallOfFameGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HallOfFrameResponseModel];

      return this.apiClient.callApi(
        '/api/v3/bug-bounties/hall-of-fame', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3BugBountiesPost operation.
     * @callback moduleapi/BugBountyApi~apiV3BugBountiesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/BugBountyNoticeRequestModel} opts.body 
     * @param {String} opts.xClientİd 
     * @param {module:api/BugBountyApi~apiV3BugBountiesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3BugBountiesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-client-id': opts['xClientİd']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/bug-bounties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}