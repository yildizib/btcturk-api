/*
 * BtcTurk API 3.0
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AccountAddressModel} from '../model/AccountAddressModel';
import {CreateSplashScreenLoginRequestModel} from '../model/CreateSplashScreenLoginRequestModel';
import {OrderMethod} from '../model/OrderMethod';
import {UserAllLimitsModel} from '../model/UserAllLimitsModel';
import {UserTradeFeeRateErrorModel} from '../model/UserTradeFeeRateErrorModel';
import {UserTradeFeeRateOutputModel} from '../model/UserTradeFeeRateOutputModel';

/**
* Account service.
* @module api/AccountApi
* @version 3.0
*/
export class AccountApi {

    /**
    * Constructs a new AccountApi. 
    * @alias module:api/AccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV3AccountAddressPut operation.
     * @callback moduleapi/AccountApi~apiV3AccountAddressPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountAddressModel} opts.body 
     * @param {module:api/AccountApi~apiV3AccountAddressPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3AccountAddressPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/account/address', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3AccountBuySellInfoGet operation.
     * @callback moduleapi/AccountApi~apiV3AccountBuySellInfoGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AccountApi~apiV3AccountBuySellInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3AccountBuySellInfoGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/account/buy-sell-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3AccountFeaturesGet operation.
     * @callback moduleapi/AccountApi~apiV3AccountFeaturesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AccountApi~apiV3AccountFeaturesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3AccountFeaturesGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/account/features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3AccountLimitsGet operation.
     * @callback moduleapi/AccountApi~apiV3AccountLimitsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAllLimitsModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencySymbol 
     * @param {module:api/AccountApi~apiV3AccountLimitsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV3AccountLimitsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'currencySymbol': opts['currencySymbol']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserAllLimitsModel;

      return this.apiClient.callApi(
        '/api/v3/account/limits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3AccountPdpaPost operation.
     * @callback moduleapi/AccountApi~apiV3AccountPdpaPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.value 
     * @param {module:api/AccountApi~apiV3AccountPdpaPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3AccountPdpaPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'value': opts['value']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/account/pdpa', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3AccountSplashScreenLoginPost operation.
     * @callback moduleapi/AccountApi~apiV3AccountSplashScreenLoginPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSplashScreenLoginRequestModel} opts.body 
     * @param {module:api/AccountApi~apiV3AccountSplashScreenLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3AccountSplashScreenLoginPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/account/splash-screen-login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3AccountTradeFeeRatesGet operation.
     * @callback moduleapi/AccountApi~apiV3AccountTradeFeeRatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserTradeFeeRateOutputModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/OrderMethod} opts.orderMethod 
     * @param {String} opts.pairSymbol 
     * @param {module:api/AccountApi~apiV3AccountTradeFeeRatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV3AccountTradeFeeRatesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'orderMethod': opts['orderMethod'],'pairSymbol': opts['pairSymbol']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserTradeFeeRateOutputModel;

      return this.apiClient.callApi(
        '/api/v3/account/trade-fee-rates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}