/*
 * BtcTurk API 3.0
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AnnouncementDetailModelIPagedList} from '../model/AnnouncementDetailModelIPagedList';
import {AnnouncementModelIPagedList} from '../model/AnnouncementModelIPagedList';
import {NotificationShowType} from '../model/NotificationShowType';
import {SystemNotificationContentModel} from '../model/SystemNotificationContentModel';
import {SystemNotificationCountModel} from '../model/SystemNotificationCountModel';
import {SystemNotificationModelIPagedList} from '../model/SystemNotificationModelIPagedList';
import {SystemNotificationReadModel} from '../model/SystemNotificationReadModel';
import {SystemNotificationRequestType} from '../model/SystemNotificationRequestType';

/**
* Notification service.
* @module api/NotificationApi
* @version 3.0
*/
export class NotificationApi {

    /**
    * Constructs a new NotificationApi. 
    * @alias module:api/NotificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV3NotificationsAnnouncementGet operation.
     * @callback moduleapi/NotificationApi~apiV3NotificationsAnnouncementGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnouncementModelIPagedList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageIndex 
     * @param {Number} opts.pageSize 
     * @param {module:model/NotificationShowType} opts.showType 
     * @param {module:api/NotificationApi~apiV3NotificationsAnnouncementGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV3NotificationsAnnouncementGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'pageIndex': opts['pageIndex'],'pageSize': opts['pageSize'],'showType': opts['showType']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnouncementModelIPagedList;

      return this.apiClient.callApi(
        '/api/v3/notifications/announcement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3NotificationsAnnouncementSlugGet operation.
     * @callback moduleapi/NotificationApi~apiV3NotificationsAnnouncementSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnouncementDetailModelIPagedList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} slug 
     * @param {module:api/NotificationApi~apiV3NotificationsAnnouncementSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV3NotificationsAnnouncementSlugGet(slug, callback) {
      
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling apiV3NotificationsAnnouncementSlugGet");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnouncementDetailModelIPagedList;

      return this.apiClient.callApi(
        '/api/v3/notifications/announcement/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3NotificationsCountGet operation.
     * @callback moduleapi/NotificationApi~apiV3NotificationsCountGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SystemNotificationCountModel>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notification summary.  Unread, read, total
     * @param {module:api/NotificationApi~apiV3NotificationsCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV3NotificationsCountGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SystemNotificationCountModel];

      return this.apiClient.callApi(
        '/api/v3/notifications/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3NotificationsGet operation.
     * @callback moduleapi/NotificationApi~apiV3NotificationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SystemNotificationModelIPagedList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageIndex 
     * @param {Number} opts.pageSize 
     * @param {Boolean} opts.read 
     * @param {Number} opts.moduleId 
     * @param {module:model/SystemNotificationRequestType} opts.type 
     * @param {module:api/NotificationApi~apiV3NotificationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV3NotificationsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'PageIndex': opts['pageIndex'],'PageSize': opts['pageSize'],'Read': opts['read'],'ModuleId': opts['moduleId'],'Type': opts['type']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SystemNotificationModelIPagedList;

      return this.apiClient.callApi(
        '/api/v3/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3NotificationsIdGet operation.
     * @callback moduleapi/NotificationApi~apiV3NotificationsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SystemNotificationContentModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} ıd 
     * @param {module:api/NotificationApi~apiV3NotificationsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV3NotificationsIdGet(ıd, callback) {
      
      let postBody = null;
      // verify the required parameter 'ıd' is set
      if (ıd === undefined || ıd === null) {
        throw new Error("Missing the required parameter 'ıd' when calling apiV3NotificationsIdGet");
      }

      let pathParams = {
        'id': ıd
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SystemNotificationContentModel;

      return this.apiClient.callApi(
        '/api/v3/notifications/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3NotificationsInitGet operation.
     * @callback moduleapi/NotificationApi~apiV3NotificationsInitGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SystemNotificationContentModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/NotificationApi~apiV3NotificationsInitGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV3NotificationsInitGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SystemNotificationContentModel;

      return this.apiClient.callApi(
        '/api/v3/notifications/init', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3NotificationsModulesGet operation.
     * @callback moduleapi/NotificationApi~apiV3NotificationsModulesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/NotificationApi~apiV3NotificationsModulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3NotificationsModulesGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/notifications/modules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3NotificationsReadAllPost operation.
     * @callback moduleapi/NotificationApi~apiV3NotificationsReadAllPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/NotificationApi~apiV3NotificationsReadAllPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3NotificationsReadAllPost(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/notifications/read/all', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3NotificationsReadPost operation.
     * @callback moduleapi/NotificationApi~apiV3NotificationsReadPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/SystemNotificationReadModel} opts.body 
     * @param {module:api/NotificationApi~apiV3NotificationsReadPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3NotificationsReadPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/notifications/read', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3NotificationsUnreadGet operation.
     * @callback moduleapi/NotificationApi~apiV3NotificationsUnreadGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SystemNotificationCountModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/NotificationApi~apiV3NotificationsUnreadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV3NotificationsUnreadGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SystemNotificationCountModel;

      return this.apiClient.callApi(
        '/api/v3/notifications/unread', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}