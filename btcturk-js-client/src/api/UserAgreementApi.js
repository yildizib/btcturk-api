/*
 * BtcTurk API 3.0
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CheckCurrencyRiskAgreementResponseModel} from '../model/CheckCurrencyRiskAgreementResponseModel';
import {CheckPairRiskAgreementResponseModel} from '../model/CheckPairRiskAgreementResponseModel';
import {CurrencyTransferType} from '../model/CurrencyTransferType';
import {ProblemDetails} from '../model/ProblemDetails';
import {UserAgreementApproveModel} from '../model/UserAgreementApproveModel';
import {UserAgreementModel} from '../model/UserAgreementModel';

/**
* UserAgreement service.
* @module api/UserAgreementApi
* @version 3.0
*/
export class UserAgreementApi {

    /**
    * Constructs a new UserAgreementApi. 
    * @alias module:api/UserAgreementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV3UserAgreementGet operation.
     * @callback moduleapi/UserAgreementApi~apiV3UserAgreementGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserAgreementModel>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/UserAgreementApi~apiV3UserAgreementGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV3UserAgreementGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserAgreementModel];

      return this.apiClient.callApi(
        '/api/v3/UserAgreement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3UserAgreementPost operation.
     * @callback moduleapi/UserAgreementApi~apiV3UserAgreementPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UserAgreementApproveModel} opts.body Approve id
     * @param {module:api/UserAgreementApi~apiV3UserAgreementPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3UserAgreementPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/UserAgreement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3UserAgreementRiskDisclosureCurrencySymbolGet operation.
     * @callback moduleapi/UserAgreementApi~apiV3UserAgreementRiskDisclosureCurrencySymbolGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckCurrencyRiskAgreementResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} symbol 
     * @param {Object} opts Optional parameters
     * @param {module:model/CurrencyTransferType} opts.transferType 
     * @param {module:api/UserAgreementApi~apiV3UserAgreementRiskDisclosureCurrencySymbolGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV3UserAgreementRiskDisclosureCurrencySymbolGet(symbol, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling apiV3UserAgreementRiskDisclosureCurrencySymbolGet");
      }

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
        'transferType': opts['transferType']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckCurrencyRiskAgreementResponseModel;

      return this.apiClient.callApi(
        '/api/v3/user-agreement/risk-disclosure/currency/{symbol}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3UserAgreementRiskDisclosurePairPairSymbolGet operation.
     * @callback moduleapi/UserAgreementApi~apiV3UserAgreementRiskDisclosurePairPairSymbolGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckPairRiskAgreementResponseModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} pairSymbol 
     * @param {module:api/UserAgreementApi~apiV3UserAgreementRiskDisclosurePairPairSymbolGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV3UserAgreementRiskDisclosurePairPairSymbolGet(pairSymbol, callback) {
      
      let postBody = null;
      // verify the required parameter 'pairSymbol' is set
      if (pairSymbol === undefined || pairSymbol === null) {
        throw new Error("Missing the required parameter 'pairSymbol' when calling apiV3UserAgreementRiskDisclosurePairPairSymbolGet");
      }

      let pathParams = {
        'pairSymbol': pairSymbol
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckPairRiskAgreementResponseModel;

      return this.apiClient.callApi(
        '/api/v3/user-agreement/risk-disclosure/pair/{pairSymbol}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3UserAgreementSlugGet operation.
     * @callback moduleapi/UserAgreementApi~apiV3UserAgreementSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAgreementModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} slug 
     * @param {module:api/UserAgreementApi~apiV3UserAgreementSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV3UserAgreementSlugGet(slug, callback) {
      
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling apiV3UserAgreementSlugGet");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserAgreementModel;

      return this.apiClient.callApi(
        '/api/v3/UserAgreement/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3UserAgreementSlugGet_0 operation.
     * @callback moduleapi/UserAgreementApi~apiV3UserAgreementSlugGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAgreementModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} slug 
     * @param {module:api/UserAgreementApi~apiV3UserAgreementSlugGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV3UserAgreementSlugGet_0(slug, callback) {
      
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling apiV3UserAgreementSlugGet_0");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserAgreementModel;

      return this.apiClient.callApi(
        '/api/v3/user-agreement/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3UserAgreementSlugPost operation.
     * @callback moduleapi/UserAgreementApi~apiV3UserAgreementSlugPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} slug 
     * @param {module:api/UserAgreementApi~apiV3UserAgreementSlugPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3UserAgreementSlugPost(slug, callback) {
      
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling apiV3UserAgreementSlugPost");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/user-agreement/{slug}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}