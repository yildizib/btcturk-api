/*
 * BtcTurk API 3.0
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CreateAlarmRequest} from '../model/CreateAlarmRequest';

/**
* Alarm service.
* @module api/AlarmApi
* @version 3.0
*/
export class AlarmApi {

    /**
    * Constructs a new AlarmApi. 
    * @alias module:api/AlarmApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV3AlarmGet operation.
     * @callback moduleapi/AlarmApi~apiV3AlarmGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ısCompleted 
     * @param {Number} opts.type 
     * @param {module:api/AlarmApi~apiV3AlarmGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3AlarmGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'isCompleted': opts['ısCompleted'],'type': opts['type']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/alarm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3AlarmIdDelete operation.
     * @callback moduleapi/AlarmApi~apiV3AlarmIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} ıd 
     * @param {module:api/AlarmApi~apiV3AlarmIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3AlarmIdDelete(ıd, callback) {
      
      let postBody = null;
      // verify the required parameter 'ıd' is set
      if (ıd === undefined || ıd === null) {
        throw new Error("Missing the required parameter 'ıd' when calling apiV3AlarmIdDelete");
      }

      let pathParams = {
        'id': ıd
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/alarm/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3AlarmPost operation.
     * @callback moduleapi/AlarmApi~apiV3AlarmPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAlarmRequest} opts.body 
     * @param {module:api/AlarmApi~apiV3AlarmPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3AlarmPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/alarm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3AlarmPut operation.
     * @callback moduleapi/AlarmApi~apiV3AlarmPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.body 
     * @param {module:api/AlarmApi~apiV3AlarmPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3AlarmPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/alarm', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}