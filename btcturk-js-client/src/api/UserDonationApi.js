/*
 * BtcTurk API 3.0
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {BadRequestResponseModel} from '../model/BadRequestResponseModel';
import {UserDonationRequestModel} from '../model/UserDonationRequestModel';

/**
* UserDonation service.
* @module api/UserDonationApi
* @version 3.0
*/
export class UserDonationApi {

    /**
    * Constructs a new UserDonationApi. 
    * @alias module:api/UserDonationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV3UserDonationBanksGet operation.
     * @callback moduleapi/UserDonationApi~apiV3UserDonationBanksGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bağış kampanyasına ait kullanılabilir bankalar
     * @param {module:api/UserDonationApi~apiV3UserDonationBanksGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3UserDonationBanksGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/user-donation/banks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3UserDonationGet operation.
     * @callback moduleapi/UserDonationApi~apiV3UserDonationGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bağış durumu
     * @param {module:api/UserDonationApi~apiV3UserDonationGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3UserDonationGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/user-donation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV3UserDonationPost operation.
     * @callback moduleapi/UserDonationApi~apiV3UserDonationPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Yeni bağış kaydı
     * @param {Object} opts Optional parameters
     * @param {module:model/UserDonationRequestModel} opts.body 
     * @param {module:api/UserDonationApi~apiV3UserDonationPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV3UserDonationPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/user-donation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}