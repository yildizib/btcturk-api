/* 
 * BtcTurk API 3.0
 *
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IUserAgreementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserAgreementModel&gt;</returns>
        List<UserAgreementModel> ApiV3UserAgreementGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserAgreementModel&gt;</returns>
        ApiResponse<List<UserAgreementModel>> ApiV3UserAgreementGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Approve id (optional)</param>
        /// <returns></returns>
        void ApiV3UserAgreementPost (UserAgreementApproveModel body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Approve id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV3UserAgreementPostWithHttpInfo (UserAgreementApproveModel body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="transferType"> (optional)</param>
        /// <returns>CheckCurrencyRiskAgreementResponseModel</returns>
        CheckCurrencyRiskAgreementResponseModel ApiV3UserAgreementRiskDisclosureCurrencySymbolGet (string symbol, CurrencyTransferType transferType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="transferType"> (optional)</param>
        /// <returns>ApiResponse of CheckCurrencyRiskAgreementResponseModel</returns>
        ApiResponse<CheckCurrencyRiskAgreementResponseModel> ApiV3UserAgreementRiskDisclosureCurrencySymbolGetWithHttpInfo (string symbol, CurrencyTransferType transferType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairSymbol"></param>
        /// <returns>CheckPairRiskAgreementResponseModel</returns>
        CheckPairRiskAgreementResponseModel ApiV3UserAgreementRiskDisclosurePairPairSymbolGet (string pairSymbol);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairSymbol"></param>
        /// <returns>ApiResponse of CheckPairRiskAgreementResponseModel</returns>
        ApiResponse<CheckPairRiskAgreementResponseModel> ApiV3UserAgreementRiskDisclosurePairPairSymbolGetWithHttpInfo (string pairSymbol);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>UserAgreementModel</returns>
        UserAgreementModel ApiV3UserAgreementSlugGet (string slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>ApiResponse of UserAgreementModel</returns>
        ApiResponse<UserAgreementModel> ApiV3UserAgreementSlugGetWithHttpInfo (string slug);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>UserAgreementModel</returns>
        UserAgreementModel ApiV3UserAgreementSlugGet_0 (string slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>ApiResponse of UserAgreementModel</returns>
        ApiResponse<UserAgreementModel> ApiV3UserAgreementSlugGet_0WithHttpInfo (string slug);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns></returns>
        void ApiV3UserAgreementSlugPost (string slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV3UserAgreementSlugPostWithHttpInfo (string slug);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserAgreementModel&gt;</returns>
        System.Threading.Tasks.Task<List<UserAgreementModel>> ApiV3UserAgreementGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserAgreementModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserAgreementModel>>> ApiV3UserAgreementGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Approve id (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV3UserAgreementPostAsync (UserAgreementApproveModel body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Approve id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV3UserAgreementPostAsyncWithHttpInfo (UserAgreementApproveModel body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="transferType"> (optional)</param>
        /// <returns>Task of CheckCurrencyRiskAgreementResponseModel</returns>
        System.Threading.Tasks.Task<CheckCurrencyRiskAgreementResponseModel> ApiV3UserAgreementRiskDisclosureCurrencySymbolGetAsync (string symbol, CurrencyTransferType transferType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="transferType"> (optional)</param>
        /// <returns>Task of ApiResponse (CheckCurrencyRiskAgreementResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckCurrencyRiskAgreementResponseModel>> ApiV3UserAgreementRiskDisclosureCurrencySymbolGetAsyncWithHttpInfo (string symbol, CurrencyTransferType transferType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairSymbol"></param>
        /// <returns>Task of CheckPairRiskAgreementResponseModel</returns>
        System.Threading.Tasks.Task<CheckPairRiskAgreementResponseModel> ApiV3UserAgreementRiskDisclosurePairPairSymbolGetAsync (string pairSymbol);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairSymbol"></param>
        /// <returns>Task of ApiResponse (CheckPairRiskAgreementResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckPairRiskAgreementResponseModel>> ApiV3UserAgreementRiskDisclosurePairPairSymbolGetAsyncWithHttpInfo (string pairSymbol);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>Task of UserAgreementModel</returns>
        System.Threading.Tasks.Task<UserAgreementModel> ApiV3UserAgreementSlugGetAsync (string slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>Task of ApiResponse (UserAgreementModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAgreementModel>> ApiV3UserAgreementSlugGetAsyncWithHttpInfo (string slug);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>Task of UserAgreementModel</returns>
        System.Threading.Tasks.Task<UserAgreementModel> ApiV3UserAgreementSlugGet_0Async (string slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>Task of ApiResponse (UserAgreementModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAgreementModel>> ApiV3UserAgreementSlugGet_0AsyncWithHttpInfo (string slug);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV3UserAgreementSlugPostAsync (string slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV3UserAgreementSlugPostAsyncWithHttpInfo (string slug);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class UserAgreementApi : IUserAgreementApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAgreementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserAgreementApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAgreementApi"/> class
        /// </summary>
        /// <returns></returns>
        public UserAgreementApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAgreementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserAgreementApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserAgreementModel&gt;</returns>
        public List<UserAgreementModel> ApiV3UserAgreementGet ()
        {
             ApiResponse<List<UserAgreementModel>> localVarResponse = ApiV3UserAgreementGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserAgreementModel&gt;</returns>
        public ApiResponse< List<UserAgreementModel> > ApiV3UserAgreementGetWithHttpInfo ()
        {

            var localVarPath = "/api/v3/UserAgreement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3UserAgreementGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAgreementModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserAgreementModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAgreementModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserAgreementModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserAgreementModel>> ApiV3UserAgreementGetAsync ()
        {
             ApiResponse<List<UserAgreementModel>> localVarResponse = await ApiV3UserAgreementGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserAgreementModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserAgreementModel>>> ApiV3UserAgreementGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v3/UserAgreement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3UserAgreementGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserAgreementModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserAgreementModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserAgreementModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Approve id (optional)</param>
        /// <returns></returns>
        public void ApiV3UserAgreementPost (UserAgreementApproveModel body = null)
        {
             ApiV3UserAgreementPostWithHttpInfo(body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Approve id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV3UserAgreementPostWithHttpInfo (UserAgreementApproveModel body = null)
        {

            var localVarPath = "/api/v3/UserAgreement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3UserAgreementPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Approve id (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV3UserAgreementPostAsync (UserAgreementApproveModel body = null)
        {
             await ApiV3UserAgreementPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Approve id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV3UserAgreementPostAsyncWithHttpInfo (UserAgreementApproveModel body = null)
        {

            var localVarPath = "/api/v3/UserAgreement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3UserAgreementPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="transferType"> (optional)</param>
        /// <returns>CheckCurrencyRiskAgreementResponseModel</returns>
        public CheckCurrencyRiskAgreementResponseModel ApiV3UserAgreementRiskDisclosureCurrencySymbolGet (string symbol, CurrencyTransferType transferType = null)
        {
             ApiResponse<CheckCurrencyRiskAgreementResponseModel> localVarResponse = ApiV3UserAgreementRiskDisclosureCurrencySymbolGetWithHttpInfo(symbol, transferType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="transferType"> (optional)</param>
        /// <returns>ApiResponse of CheckCurrencyRiskAgreementResponseModel</returns>
        public ApiResponse< CheckCurrencyRiskAgreementResponseModel > ApiV3UserAgreementRiskDisclosureCurrencySymbolGetWithHttpInfo (string symbol, CurrencyTransferType transferType = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling UserAgreementApi->ApiV3UserAgreementRiskDisclosureCurrencySymbolGet");

            var localVarPath = "/api/v3/user-agreement/risk-disclosure/currency/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (transferType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transferType", transferType)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3UserAgreementRiskDisclosureCurrencySymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckCurrencyRiskAgreementResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CheckCurrencyRiskAgreementResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckCurrencyRiskAgreementResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="transferType"> (optional)</param>
        /// <returns>Task of CheckCurrencyRiskAgreementResponseModel</returns>
        public async System.Threading.Tasks.Task<CheckCurrencyRiskAgreementResponseModel> ApiV3UserAgreementRiskDisclosureCurrencySymbolGetAsync (string symbol, CurrencyTransferType transferType = null)
        {
             ApiResponse<CheckCurrencyRiskAgreementResponseModel> localVarResponse = await ApiV3UserAgreementRiskDisclosureCurrencySymbolGetAsyncWithHttpInfo(symbol, transferType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="transferType"> (optional)</param>
        /// <returns>Task of ApiResponse (CheckCurrencyRiskAgreementResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CheckCurrencyRiskAgreementResponseModel>> ApiV3UserAgreementRiskDisclosureCurrencySymbolGetAsyncWithHttpInfo (string symbol, CurrencyTransferType transferType = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling UserAgreementApi->ApiV3UserAgreementRiskDisclosureCurrencySymbolGet");

            var localVarPath = "/api/v3/user-agreement/risk-disclosure/currency/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (transferType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transferType", transferType)); // query parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3UserAgreementRiskDisclosureCurrencySymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckCurrencyRiskAgreementResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CheckCurrencyRiskAgreementResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckCurrencyRiskAgreementResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairSymbol"></param>
        /// <returns>CheckPairRiskAgreementResponseModel</returns>
        public CheckPairRiskAgreementResponseModel ApiV3UserAgreementRiskDisclosurePairPairSymbolGet (string pairSymbol)
        {
             ApiResponse<CheckPairRiskAgreementResponseModel> localVarResponse = ApiV3UserAgreementRiskDisclosurePairPairSymbolGetWithHttpInfo(pairSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairSymbol"></param>
        /// <returns>ApiResponse of CheckPairRiskAgreementResponseModel</returns>
        public ApiResponse< CheckPairRiskAgreementResponseModel > ApiV3UserAgreementRiskDisclosurePairPairSymbolGetWithHttpInfo (string pairSymbol)
        {
            // verify the required parameter 'pairSymbol' is set
            if (pairSymbol == null)
                throw new ApiException(400, "Missing required parameter 'pairSymbol' when calling UserAgreementApi->ApiV3UserAgreementRiskDisclosurePairPairSymbolGet");

            var localVarPath = "/api/v3/user-agreement/risk-disclosure/pair/{pairSymbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pairSymbol != null) localVarPathParams.Add("pairSymbol", this.Configuration.ApiClient.ParameterToString(pairSymbol)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3UserAgreementRiskDisclosurePairPairSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckPairRiskAgreementResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CheckPairRiskAgreementResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckPairRiskAgreementResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairSymbol"></param>
        /// <returns>Task of CheckPairRiskAgreementResponseModel</returns>
        public async System.Threading.Tasks.Task<CheckPairRiskAgreementResponseModel> ApiV3UserAgreementRiskDisclosurePairPairSymbolGetAsync (string pairSymbol)
        {
             ApiResponse<CheckPairRiskAgreementResponseModel> localVarResponse = await ApiV3UserAgreementRiskDisclosurePairPairSymbolGetAsyncWithHttpInfo(pairSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairSymbol"></param>
        /// <returns>Task of ApiResponse (CheckPairRiskAgreementResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CheckPairRiskAgreementResponseModel>> ApiV3UserAgreementRiskDisclosurePairPairSymbolGetAsyncWithHttpInfo (string pairSymbol)
        {
            // verify the required parameter 'pairSymbol' is set
            if (pairSymbol == null)
                throw new ApiException(400, "Missing required parameter 'pairSymbol' when calling UserAgreementApi->ApiV3UserAgreementRiskDisclosurePairPairSymbolGet");

            var localVarPath = "/api/v3/user-agreement/risk-disclosure/pair/{pairSymbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pairSymbol != null) localVarPathParams.Add("pairSymbol", this.Configuration.ApiClient.ParameterToString(pairSymbol)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3UserAgreementRiskDisclosurePairPairSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckPairRiskAgreementResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CheckPairRiskAgreementResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckPairRiskAgreementResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>UserAgreementModel</returns>
        public UserAgreementModel ApiV3UserAgreementSlugGet (string slug)
        {
             ApiResponse<UserAgreementModel> localVarResponse = ApiV3UserAgreementSlugGetWithHttpInfo(slug);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>ApiResponse of UserAgreementModel</returns>
        public ApiResponse< UserAgreementModel > ApiV3UserAgreementSlugGetWithHttpInfo (string slug)
        {
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling UserAgreementApi->ApiV3UserAgreementSlugGet");

            var localVarPath = "/api/v3/UserAgreement/{slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3UserAgreementSlugGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAgreementModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserAgreementModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAgreementModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>Task of UserAgreementModel</returns>
        public async System.Threading.Tasks.Task<UserAgreementModel> ApiV3UserAgreementSlugGetAsync (string slug)
        {
             ApiResponse<UserAgreementModel> localVarResponse = await ApiV3UserAgreementSlugGetAsyncWithHttpInfo(slug);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>Task of ApiResponse (UserAgreementModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAgreementModel>> ApiV3UserAgreementSlugGetAsyncWithHttpInfo (string slug)
        {
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling UserAgreementApi->ApiV3UserAgreementSlugGet");

            var localVarPath = "/api/v3/UserAgreement/{slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3UserAgreementSlugGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAgreementModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserAgreementModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAgreementModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>UserAgreementModel</returns>
        public UserAgreementModel ApiV3UserAgreementSlugGet_0 (string slug)
        {
             ApiResponse<UserAgreementModel> localVarResponse = ApiV3UserAgreementSlugGet_0WithHttpInfo(slug);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>ApiResponse of UserAgreementModel</returns>
        public ApiResponse< UserAgreementModel > ApiV3UserAgreementSlugGet_0WithHttpInfo (string slug)
        {
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling UserAgreementApi->ApiV3UserAgreementSlugGet_0");

            var localVarPath = "/api/v3/user-agreement/{slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3UserAgreementSlugGet_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAgreementModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserAgreementModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAgreementModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>Task of UserAgreementModel</returns>
        public async System.Threading.Tasks.Task<UserAgreementModel> ApiV3UserAgreementSlugGet_0Async (string slug)
        {
             ApiResponse<UserAgreementModel> localVarResponse = await ApiV3UserAgreementSlugGet_0AsyncWithHttpInfo(slug);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>Task of ApiResponse (UserAgreementModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAgreementModel>> ApiV3UserAgreementSlugGet_0AsyncWithHttpInfo (string slug)
        {
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling UserAgreementApi->ApiV3UserAgreementSlugGet_0");

            var localVarPath = "/api/v3/user-agreement/{slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3UserAgreementSlugGet_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAgreementModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserAgreementModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAgreementModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns></returns>
        public void ApiV3UserAgreementSlugPost (string slug)
        {
             ApiV3UserAgreementSlugPostWithHttpInfo(slug);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV3UserAgreementSlugPostWithHttpInfo (string slug)
        {
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling UserAgreementApi->ApiV3UserAgreementSlugPost");

            var localVarPath = "/api/v3/user-agreement/{slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3UserAgreementSlugPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV3UserAgreementSlugPostAsync (string slug)
        {
             await ApiV3UserAgreementSlugPostAsyncWithHttpInfo(slug);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV3UserAgreementSlugPostAsyncWithHttpInfo (string slug)
        {
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling UserAgreementApi->ApiV3UserAgreementSlugPost");

            var localVarPath = "/api/v3/user-agreement/{slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3UserAgreementSlugPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
