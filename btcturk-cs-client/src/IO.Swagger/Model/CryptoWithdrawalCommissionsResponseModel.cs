/* 
 * BtcTurk API 3.0
 *
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CryptoWithdrawalCommissionsResponseModel
    /// </summary>
    [DataContract]
        public partial class CryptoWithdrawalCommissionsResponseModel :  IEquatable<CryptoWithdrawalCommissionsResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoWithdrawalCommissionsResponseModel" /> class.
        /// </summary>
        /// <param name="currencyName">currencyName.</param>
        /// <param name="currencySymbol">currencySymbol.</param>
        /// <param name="order">order.</param>
        /// <param name="withdrawalCommissionsModels">withdrawalCommissionsModels.</param>
        public CryptoWithdrawalCommissionsResponseModel(string currencyName = default(string), string currencySymbol = default(string), int? order = default(int?), List<WithdrawalCommissionsModel> withdrawalCommissionsModels = default(List<WithdrawalCommissionsModel>))
        {
            this.CurrencyName = currencyName;
            this.CurrencySymbol = currencySymbol;
            this.Order = order;
            this.WithdrawalCommissionsModels = withdrawalCommissionsModels;
        }
        
        /// <summary>
        /// Gets or Sets CurrencyName
        /// </summary>
        [DataMember(Name="currencyName", EmitDefaultValue=false)]
        public string CurrencyName { get; set; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        [DataMember(Name="currencySymbol", EmitDefaultValue=false)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public int? Order { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawalCommissionsModels
        /// </summary>
        [DataMember(Name="withdrawalCommissionsModels", EmitDefaultValue=false)]
        public List<WithdrawalCommissionsModel> WithdrawalCommissionsModels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CryptoWithdrawalCommissionsResponseModel {\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  WithdrawalCommissionsModels: ").Append(WithdrawalCommissionsModels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CryptoWithdrawalCommissionsResponseModel);
        }

        /// <summary>
        /// Returns true if CryptoWithdrawalCommissionsResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CryptoWithdrawalCommissionsResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CryptoWithdrawalCommissionsResponseModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyName == input.CurrencyName ||
                    (this.CurrencyName != null &&
                    this.CurrencyName.Equals(input.CurrencyName))
                ) && 
                (
                    this.CurrencySymbol == input.CurrencySymbol ||
                    (this.CurrencySymbol != null &&
                    this.CurrencySymbol.Equals(input.CurrencySymbol))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.WithdrawalCommissionsModels == input.WithdrawalCommissionsModels ||
                    this.WithdrawalCommissionsModels != null &&
                    input.WithdrawalCommissionsModels != null &&
                    this.WithdrawalCommissionsModels.SequenceEqual(input.WithdrawalCommissionsModels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyName != null)
                    hashCode = hashCode * 59 + this.CurrencyName.GetHashCode();
                if (this.CurrencySymbol != null)
                    hashCode = hashCode * 59 + this.CurrencySymbol.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.WithdrawalCommissionsModels != null)
                    hashCode = hashCode * 59 + this.WithdrawalCommissionsModels.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
