/* 
 * BtcTurk API 3.0
 *
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SystemNotificationCountModel
    /// </summary>
    [DataContract]
        public partial class SystemNotificationCountModel :  IEquatable<SystemNotificationCountModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemNotificationCountModel" /> class.
        /// </summary>
        /// <param name="t">t.</param>
        /// <param name="c">c.</param>
        /// <param name="r">r.</param>
        public SystemNotificationCountModel(string t = default(string), int? c = default(int?), bool? r = default(bool?))
        {
            this.T = t;
            this.C = c;
            this.R = r;
        }
        
        /// <summary>
        /// Gets or Sets T
        /// </summary>
        [DataMember(Name="t", EmitDefaultValue=false)]
        public string T { get; set; }

        /// <summary>
        /// Gets or Sets C
        /// </summary>
        [DataMember(Name="c", EmitDefaultValue=false)]
        public int? C { get; set; }

        /// <summary>
        /// Gets or Sets R
        /// </summary>
        [DataMember(Name="r", EmitDefaultValue=false)]
        public bool? R { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemNotificationCountModel {\n");
            sb.Append("  T: ").Append(T).Append("\n");
            sb.Append("  C: ").Append(C).Append("\n");
            sb.Append("  R: ").Append(R).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemNotificationCountModel);
        }

        /// <summary>
        /// Returns true if SystemNotificationCountModel instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemNotificationCountModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemNotificationCountModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.T == input.T ||
                    (this.T != null &&
                    this.T.Equals(input.T))
                ) && 
                (
                    this.C == input.C ||
                    (this.C != null &&
                    this.C.Equals(input.C))
                ) && 
                (
                    this.R == input.R ||
                    (this.R != null &&
                    this.R.Equals(input.R))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.T != null)
                    hashCode = hashCode * 59 + this.T.GetHashCode();
                if (this.C != null)
                    hashCode = hashCode * 59 + this.C.GetHashCode();
                if (this.R != null)
                    hashCode = hashCode * 59 + this.R.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
