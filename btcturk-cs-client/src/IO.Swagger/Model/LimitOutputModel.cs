/* 
 * BtcTurk API 3.0
 *
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LimitOutputModel
    /// </summary>
    [DataContract]
        public partial class LimitOutputModel :  IEquatable<LimitOutputModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LimitOutputModel" /> class.
        /// </summary>
        /// <param name="papara">papara.</param>
        /// <param name="akbankDirekt">akbankDirekt.</param>
        /// <param name="bank">bank.</param>
        /// <param name="currencies">currencies.</param>
        /// <param name="pairs">pairs.</param>
        /// <param name="countryCode">countryCode.</param>
        public LimitOutputModel(PaparaLimit papara = default(PaparaLimit), AkbankDirektLimit akbankDirekt = default(AkbankDirektLimit), BankLimit bank = default(BankLimit), List<CurrencyLimit> currencies = default(List<CurrencyLimit>), List<PairLimit> pairs = default(List<PairLimit>), string countryCode = default(string))
        {
            this.Papara = papara;
            this.AkbankDirekt = akbankDirekt;
            this.Bank = bank;
            this.Currencies = currencies;
            this.Pairs = pairs;
            this.CountryCode = countryCode;
        }
        
        /// <summary>
        /// Gets or Sets Papara
        /// </summary>
        [DataMember(Name="papara", EmitDefaultValue=false)]
        public PaparaLimit Papara { get; set; }

        /// <summary>
        /// Gets or Sets AkbankDirekt
        /// </summary>
        [DataMember(Name="akbankDirekt", EmitDefaultValue=false)]
        public AkbankDirektLimit AkbankDirekt { get; set; }

        /// <summary>
        /// Gets or Sets Bank
        /// </summary>
        [DataMember(Name="bank", EmitDefaultValue=false)]
        public BankLimit Bank { get; set; }

        /// <summary>
        /// Gets or Sets Currencies
        /// </summary>
        [DataMember(Name="currencies", EmitDefaultValue=false)]
        public List<CurrencyLimit> Currencies { get; set; }

        /// <summary>
        /// Gets or Sets Pairs
        /// </summary>
        [DataMember(Name="pairs", EmitDefaultValue=false)]
        public List<PairLimit> Pairs { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LimitOutputModel {\n");
            sb.Append("  Papara: ").Append(Papara).Append("\n");
            sb.Append("  AkbankDirekt: ").Append(AkbankDirekt).Append("\n");
            sb.Append("  Bank: ").Append(Bank).Append("\n");
            sb.Append("  Currencies: ").Append(Currencies).Append("\n");
            sb.Append("  Pairs: ").Append(Pairs).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LimitOutputModel);
        }

        /// <summary>
        /// Returns true if LimitOutputModel instances are equal
        /// </summary>
        /// <param name="input">Instance of LimitOutputModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LimitOutputModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Papara == input.Papara ||
                    (this.Papara != null &&
                    this.Papara.Equals(input.Papara))
                ) && 
                (
                    this.AkbankDirekt == input.AkbankDirekt ||
                    (this.AkbankDirekt != null &&
                    this.AkbankDirekt.Equals(input.AkbankDirekt))
                ) && 
                (
                    this.Bank == input.Bank ||
                    (this.Bank != null &&
                    this.Bank.Equals(input.Bank))
                ) && 
                (
                    this.Currencies == input.Currencies ||
                    this.Currencies != null &&
                    input.Currencies != null &&
                    this.Currencies.SequenceEqual(input.Currencies)
                ) && 
                (
                    this.Pairs == input.Pairs ||
                    this.Pairs != null &&
                    input.Pairs != null &&
                    this.Pairs.SequenceEqual(input.Pairs)
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Papara != null)
                    hashCode = hashCode * 59 + this.Papara.GetHashCode();
                if (this.AkbankDirekt != null)
                    hashCode = hashCode * 59 + this.AkbankDirekt.GetHashCode();
                if (this.Bank != null)
                    hashCode = hashCode * 59 + this.Bank.GetHashCode();
                if (this.Currencies != null)
                    hashCode = hashCode * 59 + this.Currencies.GetHashCode();
                if (this.Pairs != null)
                    hashCode = hashCode * 59 + this.Pairs.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
