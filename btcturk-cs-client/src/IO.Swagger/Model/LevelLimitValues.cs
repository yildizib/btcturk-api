/* 
 * BtcTurk API 3.0
 *
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LevelLimitValues
    /// </summary>
    [DataContract]
        public partial class LevelLimitValues :  IEquatable<LevelLimitValues>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LevelLimitValues" /> class.
        /// </summary>
        /// <param name="depositLimit24Hours">depositLimit24Hours.</param>
        /// <param name="depositLimit24HoursType">depositLimit24HoursType.</param>
        /// <param name="depositLimit30Days">depositLimit30Days.</param>
        /// <param name="depositLimit30DaysType">depositLimit30DaysType.</param>
        /// <param name="withdrawalLimit24Hours">withdrawalLimit24Hours.</param>
        /// <param name="withdrawalLimit24HoursType">withdrawalLimit24HoursType.</param>
        /// <param name="withdrawalLimit30Days">withdrawalLimit30Days.</param>
        /// <param name="withdrawalLimit30DaysType">withdrawalLimit30DaysType.</param>
        public LevelLimitValues(double? depositLimit24Hours = default(double?), LimitType depositLimit24HoursType = default(LimitType), double? depositLimit30Days = default(double?), LimitType depositLimit30DaysType = default(LimitType), double? withdrawalLimit24Hours = default(double?), LimitType withdrawalLimit24HoursType = default(LimitType), double? withdrawalLimit30Days = default(double?), LimitType withdrawalLimit30DaysType = default(LimitType))
        {
            this.DepositLimit24Hours = depositLimit24Hours;
            this.DepositLimit24HoursType = depositLimit24HoursType;
            this.DepositLimit30Days = depositLimit30Days;
            this.DepositLimit30DaysType = depositLimit30DaysType;
            this.WithdrawalLimit24Hours = withdrawalLimit24Hours;
            this.WithdrawalLimit24HoursType = withdrawalLimit24HoursType;
            this.WithdrawalLimit30Days = withdrawalLimit30Days;
            this.WithdrawalLimit30DaysType = withdrawalLimit30DaysType;
        }
        
        /// <summary>
        /// Gets or Sets DepositLimit24Hours
        /// </summary>
        [DataMember(Name="depositLimit24Hours", EmitDefaultValue=false)]
        public double? DepositLimit24Hours { get; set; }

        /// <summary>
        /// Gets or Sets DepositLimit24HoursType
        /// </summary>
        [DataMember(Name="depositLimit24HoursType", EmitDefaultValue=false)]
        public LimitType DepositLimit24HoursType { get; set; }

        /// <summary>
        /// Gets or Sets DepositLimit30Days
        /// </summary>
        [DataMember(Name="depositLimit30Days", EmitDefaultValue=false)]
        public double? DepositLimit30Days { get; set; }

        /// <summary>
        /// Gets or Sets DepositLimit30DaysType
        /// </summary>
        [DataMember(Name="depositLimit30DaysType", EmitDefaultValue=false)]
        public LimitType DepositLimit30DaysType { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawalLimit24Hours
        /// </summary>
        [DataMember(Name="withdrawalLimit24Hours", EmitDefaultValue=false)]
        public double? WithdrawalLimit24Hours { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawalLimit24HoursType
        /// </summary>
        [DataMember(Name="withdrawalLimit24HoursType", EmitDefaultValue=false)]
        public LimitType WithdrawalLimit24HoursType { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawalLimit30Days
        /// </summary>
        [DataMember(Name="withdrawalLimit30Days", EmitDefaultValue=false)]
        public double? WithdrawalLimit30Days { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawalLimit30DaysType
        /// </summary>
        [DataMember(Name="withdrawalLimit30DaysType", EmitDefaultValue=false)]
        public LimitType WithdrawalLimit30DaysType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LevelLimitValues {\n");
            sb.Append("  DepositLimit24Hours: ").Append(DepositLimit24Hours).Append("\n");
            sb.Append("  DepositLimit24HoursType: ").Append(DepositLimit24HoursType).Append("\n");
            sb.Append("  DepositLimit30Days: ").Append(DepositLimit30Days).Append("\n");
            sb.Append("  DepositLimit30DaysType: ").Append(DepositLimit30DaysType).Append("\n");
            sb.Append("  WithdrawalLimit24Hours: ").Append(WithdrawalLimit24Hours).Append("\n");
            sb.Append("  WithdrawalLimit24HoursType: ").Append(WithdrawalLimit24HoursType).Append("\n");
            sb.Append("  WithdrawalLimit30Days: ").Append(WithdrawalLimit30Days).Append("\n");
            sb.Append("  WithdrawalLimit30DaysType: ").Append(WithdrawalLimit30DaysType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LevelLimitValues);
        }

        /// <summary>
        /// Returns true if LevelLimitValues instances are equal
        /// </summary>
        /// <param name="input">Instance of LevelLimitValues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LevelLimitValues input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DepositLimit24Hours == input.DepositLimit24Hours ||
                    (this.DepositLimit24Hours != null &&
                    this.DepositLimit24Hours.Equals(input.DepositLimit24Hours))
                ) && 
                (
                    this.DepositLimit24HoursType == input.DepositLimit24HoursType ||
                    (this.DepositLimit24HoursType != null &&
                    this.DepositLimit24HoursType.Equals(input.DepositLimit24HoursType))
                ) && 
                (
                    this.DepositLimit30Days == input.DepositLimit30Days ||
                    (this.DepositLimit30Days != null &&
                    this.DepositLimit30Days.Equals(input.DepositLimit30Days))
                ) && 
                (
                    this.DepositLimit30DaysType == input.DepositLimit30DaysType ||
                    (this.DepositLimit30DaysType != null &&
                    this.DepositLimit30DaysType.Equals(input.DepositLimit30DaysType))
                ) && 
                (
                    this.WithdrawalLimit24Hours == input.WithdrawalLimit24Hours ||
                    (this.WithdrawalLimit24Hours != null &&
                    this.WithdrawalLimit24Hours.Equals(input.WithdrawalLimit24Hours))
                ) && 
                (
                    this.WithdrawalLimit24HoursType == input.WithdrawalLimit24HoursType ||
                    (this.WithdrawalLimit24HoursType != null &&
                    this.WithdrawalLimit24HoursType.Equals(input.WithdrawalLimit24HoursType))
                ) && 
                (
                    this.WithdrawalLimit30Days == input.WithdrawalLimit30Days ||
                    (this.WithdrawalLimit30Days != null &&
                    this.WithdrawalLimit30Days.Equals(input.WithdrawalLimit30Days))
                ) && 
                (
                    this.WithdrawalLimit30DaysType == input.WithdrawalLimit30DaysType ||
                    (this.WithdrawalLimit30DaysType != null &&
                    this.WithdrawalLimit30DaysType.Equals(input.WithdrawalLimit30DaysType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DepositLimit24Hours != null)
                    hashCode = hashCode * 59 + this.DepositLimit24Hours.GetHashCode();
                if (this.DepositLimit24HoursType != null)
                    hashCode = hashCode * 59 + this.DepositLimit24HoursType.GetHashCode();
                if (this.DepositLimit30Days != null)
                    hashCode = hashCode * 59 + this.DepositLimit30Days.GetHashCode();
                if (this.DepositLimit30DaysType != null)
                    hashCode = hashCode * 59 + this.DepositLimit30DaysType.GetHashCode();
                if (this.WithdrawalLimit24Hours != null)
                    hashCode = hashCode * 59 + this.WithdrawalLimit24Hours.GetHashCode();
                if (this.WithdrawalLimit24HoursType != null)
                    hashCode = hashCode * 59 + this.WithdrawalLimit24HoursType.GetHashCode();
                if (this.WithdrawalLimit30Days != null)
                    hashCode = hashCode * 59 + this.WithdrawalLimit30Days.GetHashCode();
                if (this.WithdrawalLimit30DaysType != null)
                    hashCode = hashCode * 59 + this.WithdrawalLimit30DaysType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
