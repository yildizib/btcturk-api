/* 
 * BtcTurk API 3.0
 *
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AnnouncementDetailModel
    /// </summary>
    [DataContract]
        public partial class AnnouncementDetailModel :  IEquatable<AnnouncementDetailModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnnouncementDetailModel" /> class.
        /// </summary>
        /// <param name="content">content.</param>
        /// <param name="metaTitle">metaTitle.</param>
        /// <param name="metaDescription">metaDescription.</param>
        /// <param name="title">title.</param>
        /// <param name="seoUrl">seoUrl.</param>
        /// <param name="releaseDate">releaseDate.</param>
        public AnnouncementDetailModel(string content = default(string), string metaTitle = default(string), string metaDescription = default(string), string title = default(string), string seoUrl = default(string), long? releaseDate = default(long?))
        {
            this.Content = content;
            this.MetaTitle = metaTitle;
            this.MetaDescription = metaDescription;
            this.Title = title;
            this.SeoUrl = seoUrl;
            this.ReleaseDate = releaseDate;
        }
        
        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets MetaTitle
        /// </summary>
        [DataMember(Name="metaTitle", EmitDefaultValue=false)]
        public string MetaTitle { get; set; }

        /// <summary>
        /// Gets or Sets MetaDescription
        /// </summary>
        [DataMember(Name="metaDescription", EmitDefaultValue=false)]
        public string MetaDescription { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets SeoUrl
        /// </summary>
        [DataMember(Name="seoUrl", EmitDefaultValue=false)]
        public string SeoUrl { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseDate
        /// </summary>
        [DataMember(Name="releaseDate", EmitDefaultValue=false)]
        public long? ReleaseDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnnouncementDetailModel {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  MetaTitle: ").Append(MetaTitle).Append("\n");
            sb.Append("  MetaDescription: ").Append(MetaDescription).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  SeoUrl: ").Append(SeoUrl).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnnouncementDetailModel);
        }

        /// <summary>
        /// Returns true if AnnouncementDetailModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AnnouncementDetailModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnnouncementDetailModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.MetaTitle == input.MetaTitle ||
                    (this.MetaTitle != null &&
                    this.MetaTitle.Equals(input.MetaTitle))
                ) && 
                (
                    this.MetaDescription == input.MetaDescription ||
                    (this.MetaDescription != null &&
                    this.MetaDescription.Equals(input.MetaDescription))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.SeoUrl == input.SeoUrl ||
                    (this.SeoUrl != null &&
                    this.SeoUrl.Equals(input.SeoUrl))
                ) && 
                (
                    this.ReleaseDate == input.ReleaseDate ||
                    (this.ReleaseDate != null &&
                    this.ReleaseDate.Equals(input.ReleaseDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.MetaTitle != null)
                    hashCode = hashCode * 59 + this.MetaTitle.GetHashCode();
                if (this.MetaDescription != null)
                    hashCode = hashCode * 59 + this.MetaDescription.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.SeoUrl != null)
                    hashCode = hashCode * 59 + this.SeoUrl.GetHashCode();
                if (this.ReleaseDate != null)
                    hashCode = hashCode * 59 + this.ReleaseDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
