/* 
 * BtcTurk API 3.0
 *
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserAllLimitsModel
    /// </summary>
    [DataContract]
        public partial class UserAllLimitsModel :  IEquatable<UserAllLimitsModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAllLimitsModel" /> class.
        /// </summary>
        /// <param name="currencySymbol">currencySymbol.</param>
        /// <param name="depositLimit24Hours">depositLimit24Hours.</param>
        /// <param name="depositLimit30Days">depositLimit30Days.</param>
        /// <param name="withdrawalLimit24Hours">withdrawalLimit24Hours.</param>
        /// <param name="withdrawalLimit30Days">withdrawalLimit30Days.</param>
        /// <param name="calculate">calculate.</param>
        /// <param name="remaining24HoursDeposit">remaining24HoursDeposit.</param>
        /// <param name="remaining30DaysDeposit">remaining30DaysDeposit.</param>
        /// <param name="remaining24HoursWithdrawal">remaining24HoursWithdrawal.</param>
        /// <param name="remaining30DaysWithdrawal">remaining30DaysWithdrawal.</param>
        public UserAllLimitsModel(string currencySymbol = default(string), double? depositLimit24Hours = default(double?), double? depositLimit30Days = default(double?), double? withdrawalLimit24Hours = default(double?), double? withdrawalLimit30Days = default(double?), bool? calculate = default(bool?), double? remaining24HoursDeposit = default(double?), double? remaining30DaysDeposit = default(double?), double? remaining24HoursWithdrawal = default(double?), double? remaining30DaysWithdrawal = default(double?))
        {
            this.CurrencySymbol = currencySymbol;
            this.DepositLimit24Hours = depositLimit24Hours;
            this.DepositLimit30Days = depositLimit30Days;
            this.WithdrawalLimit24Hours = withdrawalLimit24Hours;
            this.WithdrawalLimit30Days = withdrawalLimit30Days;
            this.Calculate = calculate;
            this.Remaining24HoursDeposit = remaining24HoursDeposit;
            this.Remaining30DaysDeposit = remaining30DaysDeposit;
            this.Remaining24HoursWithdrawal = remaining24HoursWithdrawal;
            this.Remaining30DaysWithdrawal = remaining30DaysWithdrawal;
        }
        
        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        [DataMember(Name="currencySymbol", EmitDefaultValue=false)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Gets or Sets DepositLimit24Hours
        /// </summary>
        [DataMember(Name="depositLimit24Hours", EmitDefaultValue=false)]
        public double? DepositLimit24Hours { get; set; }

        /// <summary>
        /// Gets or Sets DepositLimit30Days
        /// </summary>
        [DataMember(Name="depositLimit30Days", EmitDefaultValue=false)]
        public double? DepositLimit30Days { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawalLimit24Hours
        /// </summary>
        [DataMember(Name="withdrawalLimit24Hours", EmitDefaultValue=false)]
        public double? WithdrawalLimit24Hours { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawalLimit30Days
        /// </summary>
        [DataMember(Name="withdrawalLimit30Days", EmitDefaultValue=false)]
        public double? WithdrawalLimit30Days { get; set; }

        /// <summary>
        /// Gets or Sets Calculate
        /// </summary>
        [DataMember(Name="calculate", EmitDefaultValue=false)]
        public bool? Calculate { get; set; }

        /// <summary>
        /// Gets or Sets Remaining24HoursDeposit
        /// </summary>
        [DataMember(Name="remaining24HoursDeposit", EmitDefaultValue=false)]
        public double? Remaining24HoursDeposit { get; set; }

        /// <summary>
        /// Gets or Sets Remaining30DaysDeposit
        /// </summary>
        [DataMember(Name="remaining30DaysDeposit", EmitDefaultValue=false)]
        public double? Remaining30DaysDeposit { get; set; }

        /// <summary>
        /// Gets or Sets Remaining24HoursWithdrawal
        /// </summary>
        [DataMember(Name="remaining24HoursWithdrawal", EmitDefaultValue=false)]
        public double? Remaining24HoursWithdrawal { get; set; }

        /// <summary>
        /// Gets or Sets Remaining30DaysWithdrawal
        /// </summary>
        [DataMember(Name="remaining30DaysWithdrawal", EmitDefaultValue=false)]
        public double? Remaining30DaysWithdrawal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAllLimitsModel {\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  DepositLimit24Hours: ").Append(DepositLimit24Hours).Append("\n");
            sb.Append("  DepositLimit30Days: ").Append(DepositLimit30Days).Append("\n");
            sb.Append("  WithdrawalLimit24Hours: ").Append(WithdrawalLimit24Hours).Append("\n");
            sb.Append("  WithdrawalLimit30Days: ").Append(WithdrawalLimit30Days).Append("\n");
            sb.Append("  Calculate: ").Append(Calculate).Append("\n");
            sb.Append("  Remaining24HoursDeposit: ").Append(Remaining24HoursDeposit).Append("\n");
            sb.Append("  Remaining30DaysDeposit: ").Append(Remaining30DaysDeposit).Append("\n");
            sb.Append("  Remaining24HoursWithdrawal: ").Append(Remaining24HoursWithdrawal).Append("\n");
            sb.Append("  Remaining30DaysWithdrawal: ").Append(Remaining30DaysWithdrawal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserAllLimitsModel);
        }

        /// <summary>
        /// Returns true if UserAllLimitsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of UserAllLimitsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAllLimitsModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencySymbol == input.CurrencySymbol ||
                    (this.CurrencySymbol != null &&
                    this.CurrencySymbol.Equals(input.CurrencySymbol))
                ) && 
                (
                    this.DepositLimit24Hours == input.DepositLimit24Hours ||
                    (this.DepositLimit24Hours != null &&
                    this.DepositLimit24Hours.Equals(input.DepositLimit24Hours))
                ) && 
                (
                    this.DepositLimit30Days == input.DepositLimit30Days ||
                    (this.DepositLimit30Days != null &&
                    this.DepositLimit30Days.Equals(input.DepositLimit30Days))
                ) && 
                (
                    this.WithdrawalLimit24Hours == input.WithdrawalLimit24Hours ||
                    (this.WithdrawalLimit24Hours != null &&
                    this.WithdrawalLimit24Hours.Equals(input.WithdrawalLimit24Hours))
                ) && 
                (
                    this.WithdrawalLimit30Days == input.WithdrawalLimit30Days ||
                    (this.WithdrawalLimit30Days != null &&
                    this.WithdrawalLimit30Days.Equals(input.WithdrawalLimit30Days))
                ) && 
                (
                    this.Calculate == input.Calculate ||
                    (this.Calculate != null &&
                    this.Calculate.Equals(input.Calculate))
                ) && 
                (
                    this.Remaining24HoursDeposit == input.Remaining24HoursDeposit ||
                    (this.Remaining24HoursDeposit != null &&
                    this.Remaining24HoursDeposit.Equals(input.Remaining24HoursDeposit))
                ) && 
                (
                    this.Remaining30DaysDeposit == input.Remaining30DaysDeposit ||
                    (this.Remaining30DaysDeposit != null &&
                    this.Remaining30DaysDeposit.Equals(input.Remaining30DaysDeposit))
                ) && 
                (
                    this.Remaining24HoursWithdrawal == input.Remaining24HoursWithdrawal ||
                    (this.Remaining24HoursWithdrawal != null &&
                    this.Remaining24HoursWithdrawal.Equals(input.Remaining24HoursWithdrawal))
                ) && 
                (
                    this.Remaining30DaysWithdrawal == input.Remaining30DaysWithdrawal ||
                    (this.Remaining30DaysWithdrawal != null &&
                    this.Remaining30DaysWithdrawal.Equals(input.Remaining30DaysWithdrawal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencySymbol != null)
                    hashCode = hashCode * 59 + this.CurrencySymbol.GetHashCode();
                if (this.DepositLimit24Hours != null)
                    hashCode = hashCode * 59 + this.DepositLimit24Hours.GetHashCode();
                if (this.DepositLimit30Days != null)
                    hashCode = hashCode * 59 + this.DepositLimit30Days.GetHashCode();
                if (this.WithdrawalLimit24Hours != null)
                    hashCode = hashCode * 59 + this.WithdrawalLimit24Hours.GetHashCode();
                if (this.WithdrawalLimit30Days != null)
                    hashCode = hashCode * 59 + this.WithdrawalLimit30Days.GetHashCode();
                if (this.Calculate != null)
                    hashCode = hashCode * 59 + this.Calculate.GetHashCode();
                if (this.Remaining24HoursDeposit != null)
                    hashCode = hashCode * 59 + this.Remaining24HoursDeposit.GetHashCode();
                if (this.Remaining30DaysDeposit != null)
                    hashCode = hashCode * 59 + this.Remaining30DaysDeposit.GetHashCode();
                if (this.Remaining24HoursWithdrawal != null)
                    hashCode = hashCode * 59 + this.Remaining24HoursWithdrawal.GetHashCode();
                if (this.Remaining30DaysWithdrawal != null)
                    hashCode = hashCode * 59 + this.Remaining30DaysWithdrawal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
