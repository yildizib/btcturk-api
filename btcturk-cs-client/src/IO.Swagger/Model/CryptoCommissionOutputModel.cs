/* 
 * BtcTurk API 3.0
 *
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CryptoCommissionOutputModel
    /// </summary>
    [DataContract]
        public partial class CryptoCommissionOutputModel :  IEquatable<CryptoCommissionOutputModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoCommissionOutputModel" /> class.
        /// </summary>
        /// <param name="currencySymbol">currencySymbol.</param>
        /// <param name="deposit">deposit.</param>
        /// <param name="withdrawal">withdrawal.</param>
        public CryptoCommissionOutputModel(string currencySymbol = default(string), double? deposit = default(double?), double? withdrawal = default(double?))
        {
            this.CurrencySymbol = currencySymbol;
            this.Deposit = deposit;
            this.Withdrawal = withdrawal;
        }
        
        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        [DataMember(Name="currencySymbol", EmitDefaultValue=false)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Gets or Sets Deposit
        /// </summary>
        [DataMember(Name="deposit", EmitDefaultValue=false)]
        public double? Deposit { get; set; }

        /// <summary>
        /// Gets or Sets Withdrawal
        /// </summary>
        [DataMember(Name="withdrawal", EmitDefaultValue=false)]
        public double? Withdrawal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CryptoCommissionOutputModel {\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  Deposit: ").Append(Deposit).Append("\n");
            sb.Append("  Withdrawal: ").Append(Withdrawal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CryptoCommissionOutputModel);
        }

        /// <summary>
        /// Returns true if CryptoCommissionOutputModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CryptoCommissionOutputModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CryptoCommissionOutputModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencySymbol == input.CurrencySymbol ||
                    (this.CurrencySymbol != null &&
                    this.CurrencySymbol.Equals(input.CurrencySymbol))
                ) && 
                (
                    this.Deposit == input.Deposit ||
                    (this.Deposit != null &&
                    this.Deposit.Equals(input.Deposit))
                ) && 
                (
                    this.Withdrawal == input.Withdrawal ||
                    (this.Withdrawal != null &&
                    this.Withdrawal.Equals(input.Withdrawal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencySymbol != null)
                    hashCode = hashCode * 59 + this.CurrencySymbol.GetHashCode();
                if (this.Deposit != null)
                    hashCode = hashCode * 59 + this.Deposit.GetHashCode();
                if (this.Withdrawal != null)
                    hashCode = hashCode * 59 + this.Withdrawal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
