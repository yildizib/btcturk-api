/* 
 * BtcTurk API 3.0
 *
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CurrencyLimit
    /// </summary>
    [DataContract]
        public partial class CurrencyLimit :  IEquatable<CurrencyLimit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyLimit" /> class.
        /// </summary>
        /// <param name="symbol">symbol.</param>
        /// <param name="name">name.</param>
        /// <param name="minDeposit">minDeposit.</param>
        /// <param name="minWithdrawal">minWithdrawal.</param>
        /// <param name="levelLimits">levelLimits.</param>
        /// <param name="type">type.</param>
        /// <param name="order">order.</param>
        public CurrencyLimit(string symbol = default(string), string name = default(string), double? minDeposit = default(double?), double? minWithdrawal = default(double?), LevelLimits levelLimits = default(LevelLimits), CurrencyType type = default(CurrencyType), int? order = default(int?))
        {
            this.Symbol = symbol;
            this.Name = name;
            this.MinDeposit = minDeposit;
            this.MinWithdrawal = minWithdrawal;
            this.LevelLimits = levelLimits;
            this.Type = type;
            this.Order = order;
        }
        
        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets MinDeposit
        /// </summary>
        [DataMember(Name="minDeposit", EmitDefaultValue=false)]
        public double? MinDeposit { get; set; }

        /// <summary>
        /// Gets or Sets MinWithdrawal
        /// </summary>
        [DataMember(Name="minWithdrawal", EmitDefaultValue=false)]
        public double? MinWithdrawal { get; set; }

        /// <summary>
        /// Gets or Sets LevelLimits
        /// </summary>
        [DataMember(Name="levelLimits", EmitDefaultValue=false)]
        public LevelLimits LevelLimits { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public CurrencyType Type { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public int? Order { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrencyLimit {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MinDeposit: ").Append(MinDeposit).Append("\n");
            sb.Append("  MinWithdrawal: ").Append(MinWithdrawal).Append("\n");
            sb.Append("  LevelLimits: ").Append(LevelLimits).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrencyLimit);
        }

        /// <summary>
        /// Returns true if CurrencyLimit instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrencyLimit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencyLimit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MinDeposit == input.MinDeposit ||
                    (this.MinDeposit != null &&
                    this.MinDeposit.Equals(input.MinDeposit))
                ) && 
                (
                    this.MinWithdrawal == input.MinWithdrawal ||
                    (this.MinWithdrawal != null &&
                    this.MinWithdrawal.Equals(input.MinWithdrawal))
                ) && 
                (
                    this.LevelLimits == input.LevelLimits ||
                    (this.LevelLimits != null &&
                    this.LevelLimits.Equals(input.LevelLimits))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.MinDeposit != null)
                    hashCode = hashCode * 59 + this.MinDeposit.GetHashCode();
                if (this.MinWithdrawal != null)
                    hashCode = hashCode * 59 + this.MinWithdrawal.GetHashCode();
                if (this.LevelLimits != null)
                    hashCode = hashCode * 59 + this.LevelLimits.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
