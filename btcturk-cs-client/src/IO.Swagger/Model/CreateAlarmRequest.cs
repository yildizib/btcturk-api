/* 
 * BtcTurk API 3.0
 *
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateAlarmRequest
    /// </summary>
    [DataContract]
        public partial class CreateAlarmRequest :  IEquatable<CreateAlarmRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAlarmRequest" /> class.
        /// </summary>
        /// <param name="pair">pair.</param>
        /// <param name="triggerValue">triggerValue.</param>
        /// <param name="alarmType">alarmType.</param>
        /// <param name="vector">vector.</param>
        /// <param name="nterval">nterval.</param>
        /// <param name="repeatInterval">repeatInterval.</param>
        /// <param name="repeatMax">repeatMax.</param>
        /// <param name="smsAlert">smsAlert.</param>
        /// <param name="emailAlert">emailAlert.</param>
        /// <param name="pushNotificationAlert">pushNotificationAlert.</param>
        public CreateAlarmRequest(string pair = default(string), double? triggerValue = default(double?), AlarmTypes alarmType = default(AlarmTypes), AlarmVector vector = default(AlarmVector), AlarmInterval nterval = default(AlarmInterval), int? repeatInterval = default(int?), int? repeatMax = default(int?), bool? smsAlert = default(bool?), bool? emailAlert = default(bool?), bool? pushNotificationAlert = default(bool?))
        {
            this.Pair = pair;
            this.TriggerValue = triggerValue;
            this.AlarmType = alarmType;
            this.Vector = vector;
            this.Interval = nterval;
            this.RepeatInterval = repeatInterval;
            this.RepeatMax = repeatMax;
            this.SmsAlert = smsAlert;
            this.EmailAlert = emailAlert;
            this.PushNotificationAlert = pushNotificationAlert;
        }
        
        /// <summary>
        /// Gets or Sets Pair
        /// </summary>
        [DataMember(Name="pair", EmitDefaultValue=false)]
        public string Pair { get; set; }

        /// <summary>
        /// Gets or Sets TriggerValue
        /// </summary>
        [DataMember(Name="triggerValue", EmitDefaultValue=false)]
        public double? TriggerValue { get; set; }

        /// <summary>
        /// Gets or Sets AlarmType
        /// </summary>
        [DataMember(Name="alarmType", EmitDefaultValue=false)]
        public AlarmTypes AlarmType { get; set; }

        /// <summary>
        /// Gets or Sets Vector
        /// </summary>
        [DataMember(Name="vector", EmitDefaultValue=false)]
        public AlarmVector Vector { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [DataMember(Name="interval", EmitDefaultValue=false)]
        public AlarmInterval Interval { get; set; }

        /// <summary>
        /// Gets or Sets RepeatInterval
        /// </summary>
        [DataMember(Name="repeatInterval", EmitDefaultValue=false)]
        public int? RepeatInterval { get; set; }

        /// <summary>
        /// Gets or Sets RepeatMax
        /// </summary>
        [DataMember(Name="repeatMax", EmitDefaultValue=false)]
        public int? RepeatMax { get; set; }

        /// <summary>
        /// Gets or Sets SmsAlert
        /// </summary>
        [DataMember(Name="smsAlert", EmitDefaultValue=false)]
        public bool? SmsAlert { get; set; }

        /// <summary>
        /// Gets or Sets EmailAlert
        /// </summary>
        [DataMember(Name="emailAlert", EmitDefaultValue=false)]
        public bool? EmailAlert { get; set; }

        /// <summary>
        /// Gets or Sets PushNotificationAlert
        /// </summary>
        [DataMember(Name="pushNotificationAlert", EmitDefaultValue=false)]
        public bool? PushNotificationAlert { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAlarmRequest {\n");
            sb.Append("  Pair: ").Append(Pair).Append("\n");
            sb.Append("  TriggerValue: ").Append(TriggerValue).Append("\n");
            sb.Append("  AlarmType: ").Append(AlarmType).Append("\n");
            sb.Append("  Vector: ").Append(Vector).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  RepeatInterval: ").Append(RepeatInterval).Append("\n");
            sb.Append("  RepeatMax: ").Append(RepeatMax).Append("\n");
            sb.Append("  SmsAlert: ").Append(SmsAlert).Append("\n");
            sb.Append("  EmailAlert: ").Append(EmailAlert).Append("\n");
            sb.Append("  PushNotificationAlert: ").Append(PushNotificationAlert).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAlarmRequest);
        }

        /// <summary>
        /// Returns true if CreateAlarmRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAlarmRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAlarmRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pair == input.Pair ||
                    (this.Pair != null &&
                    this.Pair.Equals(input.Pair))
                ) && 
                (
                    this.TriggerValue == input.TriggerValue ||
                    (this.TriggerValue != null &&
                    this.TriggerValue.Equals(input.TriggerValue))
                ) && 
                (
                    this.AlarmType == input.AlarmType ||
                    (this.AlarmType != null &&
                    this.AlarmType.Equals(input.AlarmType))
                ) && 
                (
                    this.Vector == input.Vector ||
                    (this.Vector != null &&
                    this.Vector.Equals(input.Vector))
                ) && 
                (
                    this.Interval == input.Interval ||
                    (this.Interval != null &&
                    this.Interval.Equals(input.Interval))
                ) && 
                (
                    this.RepeatInterval == input.RepeatInterval ||
                    (this.RepeatInterval != null &&
                    this.RepeatInterval.Equals(input.RepeatInterval))
                ) && 
                (
                    this.RepeatMax == input.RepeatMax ||
                    (this.RepeatMax != null &&
                    this.RepeatMax.Equals(input.RepeatMax))
                ) && 
                (
                    this.SmsAlert == input.SmsAlert ||
                    (this.SmsAlert != null &&
                    this.SmsAlert.Equals(input.SmsAlert))
                ) && 
                (
                    this.EmailAlert == input.EmailAlert ||
                    (this.EmailAlert != null &&
                    this.EmailAlert.Equals(input.EmailAlert))
                ) && 
                (
                    this.PushNotificationAlert == input.PushNotificationAlert ||
                    (this.PushNotificationAlert != null &&
                    this.PushNotificationAlert.Equals(input.PushNotificationAlert))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pair != null)
                    hashCode = hashCode * 59 + this.Pair.GetHashCode();
                if (this.TriggerValue != null)
                    hashCode = hashCode * 59 + this.TriggerValue.GetHashCode();
                if (this.AlarmType != null)
                    hashCode = hashCode * 59 + this.AlarmType.GetHashCode();
                if (this.Vector != null)
                    hashCode = hashCode * 59 + this.Vector.GetHashCode();
                if (this.Interval != null)
                    hashCode = hashCode * 59 + this.Interval.GetHashCode();
                if (this.RepeatInterval != null)
                    hashCode = hashCode * 59 + this.RepeatInterval.GetHashCode();
                if (this.RepeatMax != null)
                    hashCode = hashCode * 59 + this.RepeatMax.GetHashCode();
                if (this.SmsAlert != null)
                    hashCode = hashCode * 59 + this.SmsAlert.GetHashCode();
                if (this.EmailAlert != null)
                    hashCode = hashCode * 59 + this.EmailAlert.GetHashCode();
                if (this.PushNotificationAlert != null)
                    hashCode = hashCode * 59 + this.PushNotificationAlert.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
