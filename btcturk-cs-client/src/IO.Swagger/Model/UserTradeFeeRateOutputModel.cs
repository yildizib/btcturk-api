/* 
 * BtcTurk API 3.0
 *
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserTradeFeeRateOutputModel
    /// </summary>
    [DataContract]
        public partial class UserTradeFeeRateOutputModel :  IEquatable<UserTradeFeeRateOutputModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserTradeFeeRateOutputModel" /> class.
        /// </summary>
        /// <param name="pairId">pairId.</param>
        /// <param name="pairSymbol">pairSymbol.</param>
        /// <param name="orderMethod">orderMethod.</param>
        /// <param name="makerFeePercentage">makerFeePercentage.</param>
        /// <param name="takerFeePercentage">takerFeePercentage.</param>
        /// <param name="taxPercentage">taxPercentage.</param>
        /// <param name="hasActiveCoupon">hasActiveCoupon.</param>
        public UserTradeFeeRateOutputModel(long? pairId = default(long?), string pairSymbol = default(string), OrderMethod orderMethod = default(OrderMethod), double? makerFeePercentage = default(double?), double? takerFeePercentage = default(double?), double? taxPercentage = default(double?), bool? hasActiveCoupon = default(bool?))
        {
            this.PairId = pairId;
            this.PairSymbol = pairSymbol;
            this.OrderMethod = orderMethod;
            this.MakerFeePercentage = makerFeePercentage;
            this.TakerFeePercentage = takerFeePercentage;
            this.TaxPercentage = taxPercentage;
            this.HasActiveCoupon = hasActiveCoupon;
        }
        
        /// <summary>
        /// Gets or Sets PairId
        /// </summary>
        [DataMember(Name="pairId", EmitDefaultValue=false)]
        public long? PairId { get; set; }

        /// <summary>
        /// Gets or Sets PairSymbol
        /// </summary>
        [DataMember(Name="pairSymbol", EmitDefaultValue=false)]
        public string PairSymbol { get; set; }

        /// <summary>
        /// Gets or Sets OrderMethod
        /// </summary>
        [DataMember(Name="orderMethod", EmitDefaultValue=false)]
        public OrderMethod OrderMethod { get; set; }

        /// <summary>
        /// Gets or Sets MakerFeePercentage
        /// </summary>
        [DataMember(Name="makerFeePercentage", EmitDefaultValue=false)]
        public double? MakerFeePercentage { get; set; }

        /// <summary>
        /// Gets or Sets TakerFeePercentage
        /// </summary>
        [DataMember(Name="takerFeePercentage", EmitDefaultValue=false)]
        public double? TakerFeePercentage { get; set; }

        /// <summary>
        /// Gets or Sets TaxPercentage
        /// </summary>
        [DataMember(Name="taxPercentage", EmitDefaultValue=false)]
        public double? TaxPercentage { get; set; }

        /// <summary>
        /// Gets or Sets HasActiveCoupon
        /// </summary>
        [DataMember(Name="hasActiveCoupon", EmitDefaultValue=false)]
        public bool? HasActiveCoupon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserTradeFeeRateOutputModel {\n");
            sb.Append("  PairId: ").Append(PairId).Append("\n");
            sb.Append("  PairSymbol: ").Append(PairSymbol).Append("\n");
            sb.Append("  OrderMethod: ").Append(OrderMethod).Append("\n");
            sb.Append("  MakerFeePercentage: ").Append(MakerFeePercentage).Append("\n");
            sb.Append("  TakerFeePercentage: ").Append(TakerFeePercentage).Append("\n");
            sb.Append("  TaxPercentage: ").Append(TaxPercentage).Append("\n");
            sb.Append("  HasActiveCoupon: ").Append(HasActiveCoupon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserTradeFeeRateOutputModel);
        }

        /// <summary>
        /// Returns true if UserTradeFeeRateOutputModel instances are equal
        /// </summary>
        /// <param name="input">Instance of UserTradeFeeRateOutputModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserTradeFeeRateOutputModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PairId == input.PairId ||
                    (this.PairId != null &&
                    this.PairId.Equals(input.PairId))
                ) && 
                (
                    this.PairSymbol == input.PairSymbol ||
                    (this.PairSymbol != null &&
                    this.PairSymbol.Equals(input.PairSymbol))
                ) && 
                (
                    this.OrderMethod == input.OrderMethod ||
                    (this.OrderMethod != null &&
                    this.OrderMethod.Equals(input.OrderMethod))
                ) && 
                (
                    this.MakerFeePercentage == input.MakerFeePercentage ||
                    (this.MakerFeePercentage != null &&
                    this.MakerFeePercentage.Equals(input.MakerFeePercentage))
                ) && 
                (
                    this.TakerFeePercentage == input.TakerFeePercentage ||
                    (this.TakerFeePercentage != null &&
                    this.TakerFeePercentage.Equals(input.TakerFeePercentage))
                ) && 
                (
                    this.TaxPercentage == input.TaxPercentage ||
                    (this.TaxPercentage != null &&
                    this.TaxPercentage.Equals(input.TaxPercentage))
                ) && 
                (
                    this.HasActiveCoupon == input.HasActiveCoupon ||
                    (this.HasActiveCoupon != null &&
                    this.HasActiveCoupon.Equals(input.HasActiveCoupon))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PairId != null)
                    hashCode = hashCode * 59 + this.PairId.GetHashCode();
                if (this.PairSymbol != null)
                    hashCode = hashCode * 59 + this.PairSymbol.GetHashCode();
                if (this.OrderMethod != null)
                    hashCode = hashCode * 59 + this.OrderMethod.GetHashCode();
                if (this.MakerFeePercentage != null)
                    hashCode = hashCode * 59 + this.MakerFeePercentage.GetHashCode();
                if (this.TakerFeePercentage != null)
                    hashCode = hashCode * 59 + this.TakerFeePercentage.GetHashCode();
                if (this.TaxPercentage != null)
                    hashCode = hashCode * 59 + this.TaxPercentage.GetHashCode();
                if (this.HasActiveCoupon != null)
                    hashCode = hashCode * 59 + this.HasActiveCoupon.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
