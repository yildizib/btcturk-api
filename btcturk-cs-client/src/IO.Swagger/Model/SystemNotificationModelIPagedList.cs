/* 
 * BtcTurk API 3.0
 *
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SystemNotificationModelIPagedList
    /// </summary>
    [DataContract]
        public partial class SystemNotificationModelIPagedList :  IEquatable<SystemNotificationModelIPagedList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemNotificationModelIPagedList" /> class.
        /// </summary>
        public SystemNotificationModelIPagedList()
        {
        }
        
        /// <summary>
        /// Gets or Sets IndexFrom
        /// </summary>
        [DataMember(Name="indexFrom", EmitDefaultValue=false)]
        public int? IndexFrom { get; private set; }

        /// <summary>
        /// Gets or Sets PageIndex
        /// </summary>
        [DataMember(Name="pageIndex", EmitDefaultValue=false)]
        public int? PageIndex { get; private set; }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        [DataMember(Name="pageSize", EmitDefaultValue=false)]
        public int? PageSize { get; private set; }

        /// <summary>
        /// Gets or Sets TotalCount
        /// </summary>
        [DataMember(Name="totalCount", EmitDefaultValue=false)]
        public int? TotalCount { get; private set; }

        /// <summary>
        /// Gets or Sets TotalPages
        /// </summary>
        [DataMember(Name="totalPages", EmitDefaultValue=false)]
        public int? TotalPages { get; private set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<SystemNotificationModel> Items { get; private set; }

        /// <summary>
        /// Gets or Sets HasPreviousPage
        /// </summary>
        [DataMember(Name="hasPreviousPage", EmitDefaultValue=false)]
        public bool? HasPreviousPage { get; private set; }

        /// <summary>
        /// Gets or Sets HasNextPage
        /// </summary>
        [DataMember(Name="hasNextPage", EmitDefaultValue=false)]
        public bool? HasNextPage { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemNotificationModelIPagedList {\n");
            sb.Append("  IndexFrom: ").Append(IndexFrom).Append("\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  HasPreviousPage: ").Append(HasPreviousPage).Append("\n");
            sb.Append("  HasNextPage: ").Append(HasNextPage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemNotificationModelIPagedList);
        }

        /// <summary>
        /// Returns true if SystemNotificationModelIPagedList instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemNotificationModelIPagedList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemNotificationModelIPagedList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IndexFrom == input.IndexFrom ||
                    (this.IndexFrom != null &&
                    this.IndexFrom.Equals(input.IndexFrom))
                ) && 
                (
                    this.PageIndex == input.PageIndex ||
                    (this.PageIndex != null &&
                    this.PageIndex.Equals(input.PageIndex))
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    (this.PageSize != null &&
                    this.PageSize.Equals(input.PageSize))
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    (this.TotalCount != null &&
                    this.TotalCount.Equals(input.TotalCount))
                ) && 
                (
                    this.TotalPages == input.TotalPages ||
                    (this.TotalPages != null &&
                    this.TotalPages.Equals(input.TotalPages))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.HasPreviousPage == input.HasPreviousPage ||
                    (this.HasPreviousPage != null &&
                    this.HasPreviousPage.Equals(input.HasPreviousPage))
                ) && 
                (
                    this.HasNextPage == input.HasNextPage ||
                    (this.HasNextPage != null &&
                    this.HasNextPage.Equals(input.HasNextPage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IndexFrom != null)
                    hashCode = hashCode * 59 + this.IndexFrom.GetHashCode();
                if (this.PageIndex != null)
                    hashCode = hashCode * 59 + this.PageIndex.GetHashCode();
                if (this.PageSize != null)
                    hashCode = hashCode * 59 + this.PageSize.GetHashCode();
                if (this.TotalCount != null)
                    hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                if (this.TotalPages != null)
                    hashCode = hashCode * 59 + this.TotalPages.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.HasPreviousPage != null)
                    hashCode = hashCode * 59 + this.HasPreviousPage.GetHashCode();
                if (this.HasNextPage != null)
                    hashCode = hashCode * 59 + this.HasNextPage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
