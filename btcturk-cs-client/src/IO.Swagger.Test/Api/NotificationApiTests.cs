/* 
 * BtcTurk API 3.0
 *
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing NotificationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class NotificationApiTests
    {
        private NotificationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new NotificationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of NotificationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' NotificationApi
            //Assert.IsInstanceOfType(typeof(NotificationApi), instance, "instance is a NotificationApi");
        }

        /// <summary>
        /// Test ApiV3NotificationsAnnouncementGet
        /// </summary>
        [Test]
        public void ApiV3NotificationsAnnouncementGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageIndex = null;
            //int? pageSize = null;
            //NotificationShowType showType = null;
            //var response = instance.ApiV3NotificationsAnnouncementGet(pageIndex, pageSize, showType);
            //Assert.IsInstanceOf<AnnouncementModelIPagedList> (response, "response is AnnouncementModelIPagedList");
        }
        /// <summary>
        /// Test ApiV3NotificationsAnnouncementSlugGet
        /// </summary>
        [Test]
        public void ApiV3NotificationsAnnouncementSlugGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string slug = null;
            //var response = instance.ApiV3NotificationsAnnouncementSlugGet(slug);
            //Assert.IsInstanceOf<AnnouncementDetailModelIPagedList> (response, "response is AnnouncementDetailModelIPagedList");
        }
        /// <summary>
        /// Test ApiV3NotificationsCountGet
        /// </summary>
        [Test]
        public void ApiV3NotificationsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiV3NotificationsCountGet();
            //Assert.IsInstanceOf<List<SystemNotificationCountModel>> (response, "response is List<SystemNotificationCountModel>");
        }
        /// <summary>
        /// Test ApiV3NotificationsGet
        /// </summary>
        [Test]
        public void ApiV3NotificationsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageIndex = null;
            //int? pageSize = null;
            //bool? read = null;
            //long? moduleId = null;
            //SystemNotificationRequestType type = null;
            //var response = instance.ApiV3NotificationsGet(pageIndex, pageSize, read, moduleId, type);
            //Assert.IsInstanceOf<SystemNotificationModelIPagedList> (response, "response is SystemNotificationModelIPagedList");
        }
        /// <summary>
        /// Test ApiV3NotificationsIdGet
        /// </summary>
        [Test]
        public void ApiV3NotificationsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? ıd = null;
            //var response = instance.ApiV3NotificationsIdGet(ıd);
            //Assert.IsInstanceOf<SystemNotificationContentModel> (response, "response is SystemNotificationContentModel");
        }
        /// <summary>
        /// Test ApiV3NotificationsInitGet
        /// </summary>
        [Test]
        public void ApiV3NotificationsInitGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiV3NotificationsInitGet();
            //Assert.IsInstanceOf<SystemNotificationContentModel> (response, "response is SystemNotificationContentModel");
        }
        /// <summary>
        /// Test ApiV3NotificationsModulesGet
        /// </summary>
        [Test]
        public void ApiV3NotificationsModulesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ApiV3NotificationsModulesGet();
            
        }
        /// <summary>
        /// Test ApiV3NotificationsReadAllPost
        /// </summary>
        [Test]
        public void ApiV3NotificationsReadAllPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ApiV3NotificationsReadAllPost();
            
        }
        /// <summary>
        /// Test ApiV3NotificationsReadPost
        /// </summary>
        [Test]
        public void ApiV3NotificationsReadPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SystemNotificationReadModel body = null;
            //instance.ApiV3NotificationsReadPost(body);
            
        }
        /// <summary>
        /// Test ApiV3NotificationsUnreadGet
        /// </summary>
        [Test]
        public void ApiV3NotificationsUnreadGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiV3NotificationsUnreadGet();
            //Assert.IsInstanceOf<SystemNotificationCountModel> (response, "response is SystemNotificationCountModel");
        }
    }

}
