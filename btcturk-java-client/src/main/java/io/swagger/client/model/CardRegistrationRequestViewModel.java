/*
 * BtcTurk API 3.0
 * White label exchange API documentation.
 *
 * OpenAPI spec version: 3.0
 * Contact: development@btctrader.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * CardRegistrationRequestViewModel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-06-22T13:33:34.912136+03:00[Europe/Istanbul]")
public class CardRegistrationRequestViewModel {
  @SerializedName("addressName")
  private String addressName = null;

  @SerializedName("address")
  private String address = null;

  @SerializedName("cityId")
  private Long cityId = null;

  @SerializedName("districtId")
  private Long districtId = null;

  public CardRegistrationRequestViewModel addressName(String addressName) {
    this.addressName = addressName;
    return this;
  }

   /**
   * Get addressName
   * @return addressName
  **/
  @Schema(required = true, description = "")
  public String getAddressName() {
    return addressName;
  }

  public void setAddressName(String addressName) {
    this.addressName = addressName;
  }

  public CardRegistrationRequestViewModel address(String address) {
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @Schema(required = true, description = "")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public CardRegistrationRequestViewModel cityId(Long cityId) {
    this.cityId = cityId;
    return this;
  }

   /**
   * Get cityId
   * @return cityId
  **/
  @Schema(required = true, description = "")
  public Long getCityId() {
    return cityId;
  }

  public void setCityId(Long cityId) {
    this.cityId = cityId;
  }

  public CardRegistrationRequestViewModel districtId(Long districtId) {
    this.districtId = districtId;
    return this;
  }

   /**
   * Get districtId
   * @return districtId
  **/
  @Schema(required = true, description = "")
  public Long getDistrictId() {
    return districtId;
  }

  public void setDistrictId(Long districtId) {
    this.districtId = districtId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardRegistrationRequestViewModel cardRegistrationRequestViewModel = (CardRegistrationRequestViewModel) o;
    return Objects.equals(this.addressName, cardRegistrationRequestViewModel.addressName) &&
        Objects.equals(this.address, cardRegistrationRequestViewModel.address) &&
        Objects.equals(this.cityId, cardRegistrationRequestViewModel.cityId) &&
        Objects.equals(this.districtId, cardRegistrationRequestViewModel.districtId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressName, address, cityId, districtId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardRegistrationRequestViewModel {\n");
    
    sb.append("    addressName: ").append(toIndentedString(addressName)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    cityId: ").append(toIndentedString(cityId)).append("\n");
    sb.append("    districtId: ").append(toIndentedString(districtId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
