# coding: utf-8

"""
    BtcTurk API 3.0

    White label exchange API documentation.  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: development@btctrader.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LimitOutputModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'papara': 'PaparaLimit',
        'akbank_direkt': 'AkbankDirektLimit',
        'bank': 'BankLimit',
        'currencies': 'list[CurrencyLimit]',
        'pairs': 'list[PairLimit]',
        'country_code': 'str'
    }

    attribute_map = {
        'papara': 'papara',
        'akbank_direkt': 'akbankDirekt',
        'bank': 'bank',
        'currencies': 'currencies',
        'pairs': 'pairs',
        'country_code': 'countryCode'
    }

    def __init__(self, papara=None, akbank_direkt=None, bank=None, currencies=None, pairs=None, country_code=None):  # noqa: E501
        """LimitOutputModel - a model defined in Swagger"""  # noqa: E501
        self._papara = None
        self._akbank_direkt = None
        self._bank = None
        self._currencies = None
        self._pairs = None
        self._country_code = None
        self.discriminator = None
        if papara is not None:
            self.papara = papara
        if akbank_direkt is not None:
            self.akbank_direkt = akbank_direkt
        if bank is not None:
            self.bank = bank
        if currencies is not None:
            self.currencies = currencies
        if pairs is not None:
            self.pairs = pairs
        if country_code is not None:
            self.country_code = country_code

    @property
    def papara(self):
        """Gets the papara of this LimitOutputModel.  # noqa: E501


        :return: The papara of this LimitOutputModel.  # noqa: E501
        :rtype: PaparaLimit
        """
        return self._papara

    @papara.setter
    def papara(self, papara):
        """Sets the papara of this LimitOutputModel.


        :param papara: The papara of this LimitOutputModel.  # noqa: E501
        :type: PaparaLimit
        """

        self._papara = papara

    @property
    def akbank_direkt(self):
        """Gets the akbank_direkt of this LimitOutputModel.  # noqa: E501


        :return: The akbank_direkt of this LimitOutputModel.  # noqa: E501
        :rtype: AkbankDirektLimit
        """
        return self._akbank_direkt

    @akbank_direkt.setter
    def akbank_direkt(self, akbank_direkt):
        """Sets the akbank_direkt of this LimitOutputModel.


        :param akbank_direkt: The akbank_direkt of this LimitOutputModel.  # noqa: E501
        :type: AkbankDirektLimit
        """

        self._akbank_direkt = akbank_direkt

    @property
    def bank(self):
        """Gets the bank of this LimitOutputModel.  # noqa: E501


        :return: The bank of this LimitOutputModel.  # noqa: E501
        :rtype: BankLimit
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this LimitOutputModel.


        :param bank: The bank of this LimitOutputModel.  # noqa: E501
        :type: BankLimit
        """

        self._bank = bank

    @property
    def currencies(self):
        """Gets the currencies of this LimitOutputModel.  # noqa: E501


        :return: The currencies of this LimitOutputModel.  # noqa: E501
        :rtype: list[CurrencyLimit]
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """Sets the currencies of this LimitOutputModel.


        :param currencies: The currencies of this LimitOutputModel.  # noqa: E501
        :type: list[CurrencyLimit]
        """

        self._currencies = currencies

    @property
    def pairs(self):
        """Gets the pairs of this LimitOutputModel.  # noqa: E501


        :return: The pairs of this LimitOutputModel.  # noqa: E501
        :rtype: list[PairLimit]
        """
        return self._pairs

    @pairs.setter
    def pairs(self, pairs):
        """Sets the pairs of this LimitOutputModel.


        :param pairs: The pairs of this LimitOutputModel.  # noqa: E501
        :type: list[PairLimit]
        """

        self._pairs = pairs

    @property
    def country_code(self):
        """Gets the country_code of this LimitOutputModel.  # noqa: E501


        :return: The country_code of this LimitOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this LimitOutputModel.


        :param country_code: The country_code of this LimitOutputModel.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LimitOutputModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LimitOutputModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
