# coding: utf-8

"""
    BtcTurk API 3.0

    White label exchange API documentation.  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: development@btctrader.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LevelLimits(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'level1_limits': 'LevelLimitValues',
        'level2_limits': 'LevelLimitValues',
        'basic_verified_limits': 'LevelLimitValues',
        'basic_limits': 'LevelLimitValues'
    }

    attribute_map = {
        'level1_limits': 'level1Limits',
        'level2_limits': 'level2Limits',
        'basic_verified_limits': 'basicVerifiedLimits',
        'basic_limits': 'basicLimits'
    }

    def __init__(self, level1_limits=None, level2_limits=None, basic_verified_limits=None, basic_limits=None):  # noqa: E501
        """LevelLimits - a model defined in Swagger"""  # noqa: E501
        self._level1_limits = None
        self._level2_limits = None
        self._basic_verified_limits = None
        self._basic_limits = None
        self.discriminator = None
        if level1_limits is not None:
            self.level1_limits = level1_limits
        if level2_limits is not None:
            self.level2_limits = level2_limits
        if basic_verified_limits is not None:
            self.basic_verified_limits = basic_verified_limits
        if basic_limits is not None:
            self.basic_limits = basic_limits

    @property
    def level1_limits(self):
        """Gets the level1_limits of this LevelLimits.  # noqa: E501


        :return: The level1_limits of this LevelLimits.  # noqa: E501
        :rtype: LevelLimitValues
        """
        return self._level1_limits

    @level1_limits.setter
    def level1_limits(self, level1_limits):
        """Sets the level1_limits of this LevelLimits.


        :param level1_limits: The level1_limits of this LevelLimits.  # noqa: E501
        :type: LevelLimitValues
        """

        self._level1_limits = level1_limits

    @property
    def level2_limits(self):
        """Gets the level2_limits of this LevelLimits.  # noqa: E501


        :return: The level2_limits of this LevelLimits.  # noqa: E501
        :rtype: LevelLimitValues
        """
        return self._level2_limits

    @level2_limits.setter
    def level2_limits(self, level2_limits):
        """Sets the level2_limits of this LevelLimits.


        :param level2_limits: The level2_limits of this LevelLimits.  # noqa: E501
        :type: LevelLimitValues
        """

        self._level2_limits = level2_limits

    @property
    def basic_verified_limits(self):
        """Gets the basic_verified_limits of this LevelLimits.  # noqa: E501


        :return: The basic_verified_limits of this LevelLimits.  # noqa: E501
        :rtype: LevelLimitValues
        """
        return self._basic_verified_limits

    @basic_verified_limits.setter
    def basic_verified_limits(self, basic_verified_limits):
        """Sets the basic_verified_limits of this LevelLimits.


        :param basic_verified_limits: The basic_verified_limits of this LevelLimits.  # noqa: E501
        :type: LevelLimitValues
        """

        self._basic_verified_limits = basic_verified_limits

    @property
    def basic_limits(self):
        """Gets the basic_limits of this LevelLimits.  # noqa: E501


        :return: The basic_limits of this LevelLimits.  # noqa: E501
        :rtype: LevelLimitValues
        """
        return self._basic_limits

    @basic_limits.setter
    def basic_limits(self, basic_limits):
        """Sets the basic_limits of this LevelLimits.


        :param basic_limits: The basic_limits of this LevelLimits.  # noqa: E501
        :type: LevelLimitValues
        """

        self._basic_limits = basic_limits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LevelLimits, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LevelLimits):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
