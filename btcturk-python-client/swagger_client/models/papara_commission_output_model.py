# coding: utf-8

"""
    BtcTurk API 3.0

    White label exchange API documentation.  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: development@btctrader.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaparaCommissionOutputModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deposit_fee': 'float',
        'deposit_max_fee': 'int',
        'deposit_tax': 'float',
        'withdrawal_fee': 'float',
        'withdrawal_max_fee': 'int',
        'withdrawal_tax': 'float',
        'minimum_withdrawal_per_transaction': 'float'
    }

    attribute_map = {
        'deposit_fee': 'depositFee',
        'deposit_max_fee': 'depositMaxFee',
        'deposit_tax': 'depositTax',
        'withdrawal_fee': 'withdrawalFee',
        'withdrawal_max_fee': 'withdrawalMaxFee',
        'withdrawal_tax': 'withdrawalTax',
        'minimum_withdrawal_per_transaction': 'minimumWithdrawalPerTransaction'
    }

    def __init__(self, deposit_fee=None, deposit_max_fee=None, deposit_tax=None, withdrawal_fee=None, withdrawal_max_fee=None, withdrawal_tax=None, minimum_withdrawal_per_transaction=None):  # noqa: E501
        """PaparaCommissionOutputModel - a model defined in Swagger"""  # noqa: E501
        self._deposit_fee = None
        self._deposit_max_fee = None
        self._deposit_tax = None
        self._withdrawal_fee = None
        self._withdrawal_max_fee = None
        self._withdrawal_tax = None
        self._minimum_withdrawal_per_transaction = None
        self.discriminator = None
        if deposit_fee is not None:
            self.deposit_fee = deposit_fee
        if deposit_max_fee is not None:
            self.deposit_max_fee = deposit_max_fee
        if deposit_tax is not None:
            self.deposit_tax = deposit_tax
        if withdrawal_fee is not None:
            self.withdrawal_fee = withdrawal_fee
        if withdrawal_max_fee is not None:
            self.withdrawal_max_fee = withdrawal_max_fee
        if withdrawal_tax is not None:
            self.withdrawal_tax = withdrawal_tax
        if minimum_withdrawal_per_transaction is not None:
            self.minimum_withdrawal_per_transaction = minimum_withdrawal_per_transaction

    @property
    def deposit_fee(self):
        """Gets the deposit_fee of this PaparaCommissionOutputModel.  # noqa: E501


        :return: The deposit_fee of this PaparaCommissionOutputModel.  # noqa: E501
        :rtype: float
        """
        return self._deposit_fee

    @deposit_fee.setter
    def deposit_fee(self, deposit_fee):
        """Sets the deposit_fee of this PaparaCommissionOutputModel.


        :param deposit_fee: The deposit_fee of this PaparaCommissionOutputModel.  # noqa: E501
        :type: float
        """

        self._deposit_fee = deposit_fee

    @property
    def deposit_max_fee(self):
        """Gets the deposit_max_fee of this PaparaCommissionOutputModel.  # noqa: E501


        :return: The deposit_max_fee of this PaparaCommissionOutputModel.  # noqa: E501
        :rtype: int
        """
        return self._deposit_max_fee

    @deposit_max_fee.setter
    def deposit_max_fee(self, deposit_max_fee):
        """Sets the deposit_max_fee of this PaparaCommissionOutputModel.


        :param deposit_max_fee: The deposit_max_fee of this PaparaCommissionOutputModel.  # noqa: E501
        :type: int
        """

        self._deposit_max_fee = deposit_max_fee

    @property
    def deposit_tax(self):
        """Gets the deposit_tax of this PaparaCommissionOutputModel.  # noqa: E501


        :return: The deposit_tax of this PaparaCommissionOutputModel.  # noqa: E501
        :rtype: float
        """
        return self._deposit_tax

    @deposit_tax.setter
    def deposit_tax(self, deposit_tax):
        """Sets the deposit_tax of this PaparaCommissionOutputModel.


        :param deposit_tax: The deposit_tax of this PaparaCommissionOutputModel.  # noqa: E501
        :type: float
        """

        self._deposit_tax = deposit_tax

    @property
    def withdrawal_fee(self):
        """Gets the withdrawal_fee of this PaparaCommissionOutputModel.  # noqa: E501


        :return: The withdrawal_fee of this PaparaCommissionOutputModel.  # noqa: E501
        :rtype: float
        """
        return self._withdrawal_fee

    @withdrawal_fee.setter
    def withdrawal_fee(self, withdrawal_fee):
        """Sets the withdrawal_fee of this PaparaCommissionOutputModel.


        :param withdrawal_fee: The withdrawal_fee of this PaparaCommissionOutputModel.  # noqa: E501
        :type: float
        """

        self._withdrawal_fee = withdrawal_fee

    @property
    def withdrawal_max_fee(self):
        """Gets the withdrawal_max_fee of this PaparaCommissionOutputModel.  # noqa: E501


        :return: The withdrawal_max_fee of this PaparaCommissionOutputModel.  # noqa: E501
        :rtype: int
        """
        return self._withdrawal_max_fee

    @withdrawal_max_fee.setter
    def withdrawal_max_fee(self, withdrawal_max_fee):
        """Sets the withdrawal_max_fee of this PaparaCommissionOutputModel.


        :param withdrawal_max_fee: The withdrawal_max_fee of this PaparaCommissionOutputModel.  # noqa: E501
        :type: int
        """

        self._withdrawal_max_fee = withdrawal_max_fee

    @property
    def withdrawal_tax(self):
        """Gets the withdrawal_tax of this PaparaCommissionOutputModel.  # noqa: E501


        :return: The withdrawal_tax of this PaparaCommissionOutputModel.  # noqa: E501
        :rtype: float
        """
        return self._withdrawal_tax

    @withdrawal_tax.setter
    def withdrawal_tax(self, withdrawal_tax):
        """Sets the withdrawal_tax of this PaparaCommissionOutputModel.


        :param withdrawal_tax: The withdrawal_tax of this PaparaCommissionOutputModel.  # noqa: E501
        :type: float
        """

        self._withdrawal_tax = withdrawal_tax

    @property
    def minimum_withdrawal_per_transaction(self):
        """Gets the minimum_withdrawal_per_transaction of this PaparaCommissionOutputModel.  # noqa: E501


        :return: The minimum_withdrawal_per_transaction of this PaparaCommissionOutputModel.  # noqa: E501
        :rtype: float
        """
        return self._minimum_withdrawal_per_transaction

    @minimum_withdrawal_per_transaction.setter
    def minimum_withdrawal_per_transaction(self, minimum_withdrawal_per_transaction):
        """Sets the minimum_withdrawal_per_transaction of this PaparaCommissionOutputModel.


        :param minimum_withdrawal_per_transaction: The minimum_withdrawal_per_transaction of this PaparaCommissionOutputModel.  # noqa: E501
        :type: float
        """

        self._minimum_withdrawal_per_transaction = minimum_withdrawal_per_transaction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaparaCommissionOutputModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaparaCommissionOutputModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
