# coding: utf-8

"""
    BtcTurk API 3.0

    White label exchange API documentation.  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: development@btctrader.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CryptoCommissionOutputModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency_symbol': 'str',
        'deposit': 'float',
        'withdrawal': 'float'
    }

    attribute_map = {
        'currency_symbol': 'currencySymbol',
        'deposit': 'deposit',
        'withdrawal': 'withdrawal'
    }

    def __init__(self, currency_symbol=None, deposit=None, withdrawal=None):  # noqa: E501
        """CryptoCommissionOutputModel - a model defined in Swagger"""  # noqa: E501
        self._currency_symbol = None
        self._deposit = None
        self._withdrawal = None
        self.discriminator = None
        if currency_symbol is not None:
            self.currency_symbol = currency_symbol
        if deposit is not None:
            self.deposit = deposit
        if withdrawal is not None:
            self.withdrawal = withdrawal

    @property
    def currency_symbol(self):
        """Gets the currency_symbol of this CryptoCommissionOutputModel.  # noqa: E501


        :return: The currency_symbol of this CryptoCommissionOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._currency_symbol

    @currency_symbol.setter
    def currency_symbol(self, currency_symbol):
        """Sets the currency_symbol of this CryptoCommissionOutputModel.


        :param currency_symbol: The currency_symbol of this CryptoCommissionOutputModel.  # noqa: E501
        :type: str
        """

        self._currency_symbol = currency_symbol

    @property
    def deposit(self):
        """Gets the deposit of this CryptoCommissionOutputModel.  # noqa: E501


        :return: The deposit of this CryptoCommissionOutputModel.  # noqa: E501
        :rtype: float
        """
        return self._deposit

    @deposit.setter
    def deposit(self, deposit):
        """Sets the deposit of this CryptoCommissionOutputModel.


        :param deposit: The deposit of this CryptoCommissionOutputModel.  # noqa: E501
        :type: float
        """

        self._deposit = deposit

    @property
    def withdrawal(self):
        """Gets the withdrawal of this CryptoCommissionOutputModel.  # noqa: E501


        :return: The withdrawal of this CryptoCommissionOutputModel.  # noqa: E501
        :rtype: float
        """
        return self._withdrawal

    @withdrawal.setter
    def withdrawal(self, withdrawal):
        """Sets the withdrawal of this CryptoCommissionOutputModel.


        :param withdrawal: The withdrawal of this CryptoCommissionOutputModel.  # noqa: E501
        :type: float
        """

        self._withdrawal = withdrawal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CryptoCommissionOutputModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CryptoCommissionOutputModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
