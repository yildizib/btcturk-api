# coding: utf-8

"""
    BtcTurk API 3.0

    White label exchange API documentation.  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: development@btctrader.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateAlarmRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pair': 'str',
        'trigger_value': 'float',
        'alarm_type': 'AlarmTypes',
        'vector': 'AlarmVector',
        'interval': 'AlarmInterval',
        'repeat_ınterval': 'int',
        'repeat_max': 'int',
        'sms_alert': 'bool',
        'email_alert': 'bool',
        'push_notification_alert': 'bool'
    }

    attribute_map = {
        'pair': 'pair',
        'trigger_value': 'triggerValue',
        'alarm_type': 'alarmType',
        'vector': 'vector',
        'interval': 'interval',
        'repeat_ınterval': 'repeatInterval',
        'repeat_max': 'repeatMax',
        'sms_alert': 'smsAlert',
        'email_alert': 'emailAlert',
        'push_notification_alert': 'pushNotificationAlert'
    }

    def __init__(self, pair=None, trigger_value=None, alarm_type=None, vector=None, interval=None, repeat_ınterval=None, repeat_max=None, sms_alert=None, email_alert=None, push_notification_alert=None):  # noqa: E501
        """CreateAlarmRequest - a model defined in Swagger"""  # noqa: E501
        self._pair = None
        self._trigger_value = None
        self._alarm_type = None
        self._vector = None
        self._interval = None
        self._repeat_ınterval = None
        self._repeat_max = None
        self._sms_alert = None
        self._email_alert = None
        self._push_notification_alert = None
        self.discriminator = None
        if pair is not None:
            self.pair = pair
        if trigger_value is not None:
            self.trigger_value = trigger_value
        if alarm_type is not None:
            self.alarm_type = alarm_type
        if vector is not None:
            self.vector = vector
        if interval is not None:
            self.interval = interval
        if repeat_ınterval is not None:
            self.repeat_ınterval = repeat_ınterval
        if repeat_max is not None:
            self.repeat_max = repeat_max
        if sms_alert is not None:
            self.sms_alert = sms_alert
        if email_alert is not None:
            self.email_alert = email_alert
        if push_notification_alert is not None:
            self.push_notification_alert = push_notification_alert

    @property
    def pair(self):
        """Gets the pair of this CreateAlarmRequest.  # noqa: E501


        :return: The pair of this CreateAlarmRequest.  # noqa: E501
        :rtype: str
        """
        return self._pair

    @pair.setter
    def pair(self, pair):
        """Sets the pair of this CreateAlarmRequest.


        :param pair: The pair of this CreateAlarmRequest.  # noqa: E501
        :type: str
        """

        self._pair = pair

    @property
    def trigger_value(self):
        """Gets the trigger_value of this CreateAlarmRequest.  # noqa: E501


        :return: The trigger_value of this CreateAlarmRequest.  # noqa: E501
        :rtype: float
        """
        return self._trigger_value

    @trigger_value.setter
    def trigger_value(self, trigger_value):
        """Sets the trigger_value of this CreateAlarmRequest.


        :param trigger_value: The trigger_value of this CreateAlarmRequest.  # noqa: E501
        :type: float
        """

        self._trigger_value = trigger_value

    @property
    def alarm_type(self):
        """Gets the alarm_type of this CreateAlarmRequest.  # noqa: E501


        :return: The alarm_type of this CreateAlarmRequest.  # noqa: E501
        :rtype: AlarmTypes
        """
        return self._alarm_type

    @alarm_type.setter
    def alarm_type(self, alarm_type):
        """Sets the alarm_type of this CreateAlarmRequest.


        :param alarm_type: The alarm_type of this CreateAlarmRequest.  # noqa: E501
        :type: AlarmTypes
        """

        self._alarm_type = alarm_type

    @property
    def vector(self):
        """Gets the vector of this CreateAlarmRequest.  # noqa: E501


        :return: The vector of this CreateAlarmRequest.  # noqa: E501
        :rtype: AlarmVector
        """
        return self._vector

    @vector.setter
    def vector(self, vector):
        """Sets the vector of this CreateAlarmRequest.


        :param vector: The vector of this CreateAlarmRequest.  # noqa: E501
        :type: AlarmVector
        """

        self._vector = vector

    @property
    def interval(self):
        """Gets the interval of this CreateAlarmRequest.  # noqa: E501


        :return: The interval of this CreateAlarmRequest.  # noqa: E501
        :rtype: AlarmInterval
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this CreateAlarmRequest.


        :param interval: The interval of this CreateAlarmRequest.  # noqa: E501
        :type: AlarmInterval
        """

        self._interval = interval

    @property
    def repeat_ınterval(self):
        """Gets the repeat_ınterval of this CreateAlarmRequest.  # noqa: E501


        :return: The repeat_ınterval of this CreateAlarmRequest.  # noqa: E501
        :rtype: int
        """
        return self._repeat_ınterval

    @repeat_ınterval.setter
    def repeat_ınterval(self, repeat_ınterval):
        """Sets the repeat_ınterval of this CreateAlarmRequest.


        :param repeat_ınterval: The repeat_ınterval of this CreateAlarmRequest.  # noqa: E501
        :type: int
        """

        self._repeat_ınterval = repeat_ınterval

    @property
    def repeat_max(self):
        """Gets the repeat_max of this CreateAlarmRequest.  # noqa: E501


        :return: The repeat_max of this CreateAlarmRequest.  # noqa: E501
        :rtype: int
        """
        return self._repeat_max

    @repeat_max.setter
    def repeat_max(self, repeat_max):
        """Sets the repeat_max of this CreateAlarmRequest.


        :param repeat_max: The repeat_max of this CreateAlarmRequest.  # noqa: E501
        :type: int
        """

        self._repeat_max = repeat_max

    @property
    def sms_alert(self):
        """Gets the sms_alert of this CreateAlarmRequest.  # noqa: E501


        :return: The sms_alert of this CreateAlarmRequest.  # noqa: E501
        :rtype: bool
        """
        return self._sms_alert

    @sms_alert.setter
    def sms_alert(self, sms_alert):
        """Sets the sms_alert of this CreateAlarmRequest.


        :param sms_alert: The sms_alert of this CreateAlarmRequest.  # noqa: E501
        :type: bool
        """

        self._sms_alert = sms_alert

    @property
    def email_alert(self):
        """Gets the email_alert of this CreateAlarmRequest.  # noqa: E501


        :return: The email_alert of this CreateAlarmRequest.  # noqa: E501
        :rtype: bool
        """
        return self._email_alert

    @email_alert.setter
    def email_alert(self, email_alert):
        """Sets the email_alert of this CreateAlarmRequest.


        :param email_alert: The email_alert of this CreateAlarmRequest.  # noqa: E501
        :type: bool
        """

        self._email_alert = email_alert

    @property
    def push_notification_alert(self):
        """Gets the push_notification_alert of this CreateAlarmRequest.  # noqa: E501


        :return: The push_notification_alert of this CreateAlarmRequest.  # noqa: E501
        :rtype: bool
        """
        return self._push_notification_alert

    @push_notification_alert.setter
    def push_notification_alert(self, push_notification_alert):
        """Sets the push_notification_alert of this CreateAlarmRequest.


        :param push_notification_alert: The push_notification_alert of this CreateAlarmRequest.  # noqa: E501
        :type: bool
        """

        self._push_notification_alert = push_notification_alert

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateAlarmRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAlarmRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
