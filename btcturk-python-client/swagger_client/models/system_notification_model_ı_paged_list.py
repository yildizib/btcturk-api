# coding: utf-8

"""
    BtcTurk API 3.0

    White label exchange API documentation.  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: development@btctrader.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SystemNotificationModelIPagedList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index_from': 'int',
        'page_ındex': 'int',
        'page_size': 'int',
        'total_count': 'int',
        'total_pages': 'int',
        'items': 'list[SystemNotificationModel]',
        'has_previous_page': 'bool',
        'has_next_page': 'bool'
    }

    attribute_map = {
        'index_from': 'indexFrom',
        'page_ındex': 'pageIndex',
        'page_size': 'pageSize',
        'total_count': 'totalCount',
        'total_pages': 'totalPages',
        'items': 'items',
        'has_previous_page': 'hasPreviousPage',
        'has_next_page': 'hasNextPage'
    }

    def __init__(self, index_from=None, page_ındex=None, page_size=None, total_count=None, total_pages=None, items=None, has_previous_page=None, has_next_page=None):  # noqa: E501
        """SystemNotificationModelIPagedList - a model defined in Swagger"""  # noqa: E501
        self._index_from = None
        self._page_ındex = None
        self._page_size = None
        self._total_count = None
        self._total_pages = None
        self._items = None
        self._has_previous_page = None
        self._has_next_page = None
        self.discriminator = None
        if index_from is not None:
            self.index_from = index_from
        if page_ındex is not None:
            self.page_ındex = page_ındex
        if page_size is not None:
            self.page_size = page_size
        if total_count is not None:
            self.total_count = total_count
        if total_pages is not None:
            self.total_pages = total_pages
        if items is not None:
            self.items = items
        if has_previous_page is not None:
            self.has_previous_page = has_previous_page
        if has_next_page is not None:
            self.has_next_page = has_next_page

    @property
    def index_from(self):
        """Gets the index_from of this SystemNotificationModelIPagedList.  # noqa: E501


        :return: The index_from of this SystemNotificationModelIPagedList.  # noqa: E501
        :rtype: int
        """
        return self._index_from

    @index_from.setter
    def index_from(self, index_from):
        """Sets the index_from of this SystemNotificationModelIPagedList.


        :param index_from: The index_from of this SystemNotificationModelIPagedList.  # noqa: E501
        :type: int
        """

        self._index_from = index_from

    @property
    def page_ındex(self):
        """Gets the page_ındex of this SystemNotificationModelIPagedList.  # noqa: E501


        :return: The page_ındex of this SystemNotificationModelIPagedList.  # noqa: E501
        :rtype: int
        """
        return self._page_ındex

    @page_ındex.setter
    def page_ındex(self, page_ındex):
        """Sets the page_ındex of this SystemNotificationModelIPagedList.


        :param page_ındex: The page_ındex of this SystemNotificationModelIPagedList.  # noqa: E501
        :type: int
        """

        self._page_ındex = page_ındex

    @property
    def page_size(self):
        """Gets the page_size of this SystemNotificationModelIPagedList.  # noqa: E501


        :return: The page_size of this SystemNotificationModelIPagedList.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this SystemNotificationModelIPagedList.


        :param page_size: The page_size of this SystemNotificationModelIPagedList.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def total_count(self):
        """Gets the total_count of this SystemNotificationModelIPagedList.  # noqa: E501


        :return: The total_count of this SystemNotificationModelIPagedList.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this SystemNotificationModelIPagedList.


        :param total_count: The total_count of this SystemNotificationModelIPagedList.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def total_pages(self):
        """Gets the total_pages of this SystemNotificationModelIPagedList.  # noqa: E501


        :return: The total_pages of this SystemNotificationModelIPagedList.  # noqa: E501
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this SystemNotificationModelIPagedList.


        :param total_pages: The total_pages of this SystemNotificationModelIPagedList.  # noqa: E501
        :type: int
        """

        self._total_pages = total_pages

    @property
    def items(self):
        """Gets the items of this SystemNotificationModelIPagedList.  # noqa: E501


        :return: The items of this SystemNotificationModelIPagedList.  # noqa: E501
        :rtype: list[SystemNotificationModel]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SystemNotificationModelIPagedList.


        :param items: The items of this SystemNotificationModelIPagedList.  # noqa: E501
        :type: list[SystemNotificationModel]
        """

        self._items = items

    @property
    def has_previous_page(self):
        """Gets the has_previous_page of this SystemNotificationModelIPagedList.  # noqa: E501


        :return: The has_previous_page of this SystemNotificationModelIPagedList.  # noqa: E501
        :rtype: bool
        """
        return self._has_previous_page

    @has_previous_page.setter
    def has_previous_page(self, has_previous_page):
        """Sets the has_previous_page of this SystemNotificationModelIPagedList.


        :param has_previous_page: The has_previous_page of this SystemNotificationModelIPagedList.  # noqa: E501
        :type: bool
        """

        self._has_previous_page = has_previous_page

    @property
    def has_next_page(self):
        """Gets the has_next_page of this SystemNotificationModelIPagedList.  # noqa: E501


        :return: The has_next_page of this SystemNotificationModelIPagedList.  # noqa: E501
        :rtype: bool
        """
        return self._has_next_page

    @has_next_page.setter
    def has_next_page(self, has_next_page):
        """Sets the has_next_page of this SystemNotificationModelIPagedList.


        :param has_next_page: The has_next_page of this SystemNotificationModelIPagedList.  # noqa: E501
        :type: bool
        """

        self._has_next_page = has_next_page

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemNotificationModelIPagedList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemNotificationModelIPagedList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
