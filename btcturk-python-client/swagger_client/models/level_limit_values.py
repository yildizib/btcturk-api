# coding: utf-8

"""
    BtcTurk API 3.0

    White label exchange API documentation.  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: development@btctrader.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LevelLimitValues(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deposit_limit24_hours': 'float',
        'deposit_limit24_hours_type': 'LimitType',
        'deposit_limit30_days': 'float',
        'deposit_limit30_days_type': 'LimitType',
        'withdrawal_limit24_hours': 'float',
        'withdrawal_limit24_hours_type': 'LimitType',
        'withdrawal_limit30_days': 'float',
        'withdrawal_limit30_days_type': 'LimitType'
    }

    attribute_map = {
        'deposit_limit24_hours': 'depositLimit24Hours',
        'deposit_limit24_hours_type': 'depositLimit24HoursType',
        'deposit_limit30_days': 'depositLimit30Days',
        'deposit_limit30_days_type': 'depositLimit30DaysType',
        'withdrawal_limit24_hours': 'withdrawalLimit24Hours',
        'withdrawal_limit24_hours_type': 'withdrawalLimit24HoursType',
        'withdrawal_limit30_days': 'withdrawalLimit30Days',
        'withdrawal_limit30_days_type': 'withdrawalLimit30DaysType'
    }

    def __init__(self, deposit_limit24_hours=None, deposit_limit24_hours_type=None, deposit_limit30_days=None, deposit_limit30_days_type=None, withdrawal_limit24_hours=None, withdrawal_limit24_hours_type=None, withdrawal_limit30_days=None, withdrawal_limit30_days_type=None):  # noqa: E501
        """LevelLimitValues - a model defined in Swagger"""  # noqa: E501
        self._deposit_limit24_hours = None
        self._deposit_limit24_hours_type = None
        self._deposit_limit30_days = None
        self._deposit_limit30_days_type = None
        self._withdrawal_limit24_hours = None
        self._withdrawal_limit24_hours_type = None
        self._withdrawal_limit30_days = None
        self._withdrawal_limit30_days_type = None
        self.discriminator = None
        if deposit_limit24_hours is not None:
            self.deposit_limit24_hours = deposit_limit24_hours
        if deposit_limit24_hours_type is not None:
            self.deposit_limit24_hours_type = deposit_limit24_hours_type
        if deposit_limit30_days is not None:
            self.deposit_limit30_days = deposit_limit30_days
        if deposit_limit30_days_type is not None:
            self.deposit_limit30_days_type = deposit_limit30_days_type
        if withdrawal_limit24_hours is not None:
            self.withdrawal_limit24_hours = withdrawal_limit24_hours
        if withdrawal_limit24_hours_type is not None:
            self.withdrawal_limit24_hours_type = withdrawal_limit24_hours_type
        if withdrawal_limit30_days is not None:
            self.withdrawal_limit30_days = withdrawal_limit30_days
        if withdrawal_limit30_days_type is not None:
            self.withdrawal_limit30_days_type = withdrawal_limit30_days_type

    @property
    def deposit_limit24_hours(self):
        """Gets the deposit_limit24_hours of this LevelLimitValues.  # noqa: E501


        :return: The deposit_limit24_hours of this LevelLimitValues.  # noqa: E501
        :rtype: float
        """
        return self._deposit_limit24_hours

    @deposit_limit24_hours.setter
    def deposit_limit24_hours(self, deposit_limit24_hours):
        """Sets the deposit_limit24_hours of this LevelLimitValues.


        :param deposit_limit24_hours: The deposit_limit24_hours of this LevelLimitValues.  # noqa: E501
        :type: float
        """

        self._deposit_limit24_hours = deposit_limit24_hours

    @property
    def deposit_limit24_hours_type(self):
        """Gets the deposit_limit24_hours_type of this LevelLimitValues.  # noqa: E501


        :return: The deposit_limit24_hours_type of this LevelLimitValues.  # noqa: E501
        :rtype: LimitType
        """
        return self._deposit_limit24_hours_type

    @deposit_limit24_hours_type.setter
    def deposit_limit24_hours_type(self, deposit_limit24_hours_type):
        """Sets the deposit_limit24_hours_type of this LevelLimitValues.


        :param deposit_limit24_hours_type: The deposit_limit24_hours_type of this LevelLimitValues.  # noqa: E501
        :type: LimitType
        """

        self._deposit_limit24_hours_type = deposit_limit24_hours_type

    @property
    def deposit_limit30_days(self):
        """Gets the deposit_limit30_days of this LevelLimitValues.  # noqa: E501


        :return: The deposit_limit30_days of this LevelLimitValues.  # noqa: E501
        :rtype: float
        """
        return self._deposit_limit30_days

    @deposit_limit30_days.setter
    def deposit_limit30_days(self, deposit_limit30_days):
        """Sets the deposit_limit30_days of this LevelLimitValues.


        :param deposit_limit30_days: The deposit_limit30_days of this LevelLimitValues.  # noqa: E501
        :type: float
        """

        self._deposit_limit30_days = deposit_limit30_days

    @property
    def deposit_limit30_days_type(self):
        """Gets the deposit_limit30_days_type of this LevelLimitValues.  # noqa: E501


        :return: The deposit_limit30_days_type of this LevelLimitValues.  # noqa: E501
        :rtype: LimitType
        """
        return self._deposit_limit30_days_type

    @deposit_limit30_days_type.setter
    def deposit_limit30_days_type(self, deposit_limit30_days_type):
        """Sets the deposit_limit30_days_type of this LevelLimitValues.


        :param deposit_limit30_days_type: The deposit_limit30_days_type of this LevelLimitValues.  # noqa: E501
        :type: LimitType
        """

        self._deposit_limit30_days_type = deposit_limit30_days_type

    @property
    def withdrawal_limit24_hours(self):
        """Gets the withdrawal_limit24_hours of this LevelLimitValues.  # noqa: E501


        :return: The withdrawal_limit24_hours of this LevelLimitValues.  # noqa: E501
        :rtype: float
        """
        return self._withdrawal_limit24_hours

    @withdrawal_limit24_hours.setter
    def withdrawal_limit24_hours(self, withdrawal_limit24_hours):
        """Sets the withdrawal_limit24_hours of this LevelLimitValues.


        :param withdrawal_limit24_hours: The withdrawal_limit24_hours of this LevelLimitValues.  # noqa: E501
        :type: float
        """

        self._withdrawal_limit24_hours = withdrawal_limit24_hours

    @property
    def withdrawal_limit24_hours_type(self):
        """Gets the withdrawal_limit24_hours_type of this LevelLimitValues.  # noqa: E501


        :return: The withdrawal_limit24_hours_type of this LevelLimitValues.  # noqa: E501
        :rtype: LimitType
        """
        return self._withdrawal_limit24_hours_type

    @withdrawal_limit24_hours_type.setter
    def withdrawal_limit24_hours_type(self, withdrawal_limit24_hours_type):
        """Sets the withdrawal_limit24_hours_type of this LevelLimitValues.


        :param withdrawal_limit24_hours_type: The withdrawal_limit24_hours_type of this LevelLimitValues.  # noqa: E501
        :type: LimitType
        """

        self._withdrawal_limit24_hours_type = withdrawal_limit24_hours_type

    @property
    def withdrawal_limit30_days(self):
        """Gets the withdrawal_limit30_days of this LevelLimitValues.  # noqa: E501


        :return: The withdrawal_limit30_days of this LevelLimitValues.  # noqa: E501
        :rtype: float
        """
        return self._withdrawal_limit30_days

    @withdrawal_limit30_days.setter
    def withdrawal_limit30_days(self, withdrawal_limit30_days):
        """Sets the withdrawal_limit30_days of this LevelLimitValues.


        :param withdrawal_limit30_days: The withdrawal_limit30_days of this LevelLimitValues.  # noqa: E501
        :type: float
        """

        self._withdrawal_limit30_days = withdrawal_limit30_days

    @property
    def withdrawal_limit30_days_type(self):
        """Gets the withdrawal_limit30_days_type of this LevelLimitValues.  # noqa: E501


        :return: The withdrawal_limit30_days_type of this LevelLimitValues.  # noqa: E501
        :rtype: LimitType
        """
        return self._withdrawal_limit30_days_type

    @withdrawal_limit30_days_type.setter
    def withdrawal_limit30_days_type(self, withdrawal_limit30_days_type):
        """Sets the withdrawal_limit30_days_type of this LevelLimitValues.


        :param withdrawal_limit30_days_type: The withdrawal_limit30_days_type of this LevelLimitValues.  # noqa: E501
        :type: LimitType
        """

        self._withdrawal_limit30_days_type = withdrawal_limit30_days_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LevelLimitValues, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LevelLimitValues):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
