# coding: utf-8

"""
    BtcTurk API 3.0

    White label exchange API documentation.  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: development@btctrader.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountAddressModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_ıd': 'int',
        'city': 'str',
        'town': 'str',
        'district': 'str',
        'country_name': 'str'
    }

    attribute_map = {
        'country_ıd': 'countryId',
        'city': 'city',
        'town': 'town',
        'district': 'district',
        'country_name': 'countryName'
    }

    def __init__(self, country_ıd=None, city=None, town=None, district=None, country_name=None):  # noqa: E501
        """AccountAddressModel - a model defined in Swagger"""  # noqa: E501
        self._country_ıd = None
        self._city = None
        self._town = None
        self._district = None
        self._country_name = None
        self.discriminator = None
        if country_ıd is not None:
            self.country_ıd = country_ıd
        if city is not None:
            self.city = city
        if town is not None:
            self.town = town
        if district is not None:
            self.district = district
        if country_name is not None:
            self.country_name = country_name

    @property
    def country_ıd(self):
        """Gets the country_ıd of this AccountAddressModel.  # noqa: E501


        :return: The country_ıd of this AccountAddressModel.  # noqa: E501
        :rtype: int
        """
        return self._country_ıd

    @country_ıd.setter
    def country_ıd(self, country_ıd):
        """Sets the country_ıd of this AccountAddressModel.


        :param country_ıd: The country_ıd of this AccountAddressModel.  # noqa: E501
        :type: int
        """

        self._country_ıd = country_ıd

    @property
    def city(self):
        """Gets the city of this AccountAddressModel.  # noqa: E501


        :return: The city of this AccountAddressModel.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AccountAddressModel.


        :param city: The city of this AccountAddressModel.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def town(self):
        """Gets the town of this AccountAddressModel.  # noqa: E501


        :return: The town of this AccountAddressModel.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this AccountAddressModel.


        :param town: The town of this AccountAddressModel.  # noqa: E501
        :type: str
        """

        self._town = town

    @property
    def district(self):
        """Gets the district of this AccountAddressModel.  # noqa: E501


        :return: The district of this AccountAddressModel.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this AccountAddressModel.


        :param district: The district of this AccountAddressModel.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def country_name(self):
        """Gets the country_name of this AccountAddressModel.  # noqa: E501


        :return: The country_name of this AccountAddressModel.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this AccountAddressModel.


        :param country_name: The country_name of this AccountAddressModel.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountAddressModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountAddressModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
