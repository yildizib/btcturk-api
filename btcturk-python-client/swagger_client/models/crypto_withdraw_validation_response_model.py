# coding: utf-8

"""
    BtcTurk API 3.0

    White label exchange API documentation.  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: development@btctrader.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CryptoWithdrawValidationResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'asset': 'str',
        'address': 'str',
        'amount': 'str',
        'fee': 'str',
        'symbol': 'str',
        '_date': 'int',
        'precision': 'int',
        'confirm_required': 'bool'
    }

    attribute_map = {
        'message': 'message',
        'asset': 'asset',
        'address': 'address',
        'amount': 'amount',
        'fee': 'fee',
        'symbol': 'symbol',
        '_date': 'date',
        'precision': 'precision',
        'confirm_required': 'confirmRequired'
    }

    def __init__(self, message=None, asset=None, address=None, amount=None, fee=None, symbol=None, _date=None, precision=None, confirm_required=None):  # noqa: E501
        """CryptoWithdrawValidationResponseModel - a model defined in Swagger"""  # noqa: E501
        self._message = None
        self._asset = None
        self._address = None
        self._amount = None
        self._fee = None
        self._symbol = None
        self.__date = None
        self._precision = None
        self._confirm_required = None
        self.discriminator = None
        if message is not None:
            self.message = message
        if asset is not None:
            self.asset = asset
        if address is not None:
            self.address = address
        if amount is not None:
            self.amount = amount
        if fee is not None:
            self.fee = fee
        if symbol is not None:
            self.symbol = symbol
        if _date is not None:
            self._date = _date
        if precision is not None:
            self.precision = precision
        if confirm_required is not None:
            self.confirm_required = confirm_required

    @property
    def message(self):
        """Gets the message of this CryptoWithdrawValidationResponseModel.  # noqa: E501


        :return: The message of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CryptoWithdrawValidationResponseModel.


        :param message: The message of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def asset(self):
        """Gets the asset of this CryptoWithdrawValidationResponseModel.  # noqa: E501


        :return: The asset of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this CryptoWithdrawValidationResponseModel.


        :param asset: The asset of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :type: str
        """

        self._asset = asset

    @property
    def address(self):
        """Gets the address of this CryptoWithdrawValidationResponseModel.  # noqa: E501


        :return: The address of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CryptoWithdrawValidationResponseModel.


        :param address: The address of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def amount(self):
        """Gets the amount of this CryptoWithdrawValidationResponseModel.  # noqa: E501


        :return: The amount of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CryptoWithdrawValidationResponseModel.


        :param amount: The amount of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def fee(self):
        """Gets the fee of this CryptoWithdrawValidationResponseModel.  # noqa: E501


        :return: The fee of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this CryptoWithdrawValidationResponseModel.


        :param fee: The fee of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :type: str
        """

        self._fee = fee

    @property
    def symbol(self):
        """Gets the symbol of this CryptoWithdrawValidationResponseModel.  # noqa: E501


        :return: The symbol of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this CryptoWithdrawValidationResponseModel.


        :param symbol: The symbol of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def _date(self):
        """Gets the _date of this CryptoWithdrawValidationResponseModel.  # noqa: E501


        :return: The _date of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :rtype: int
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CryptoWithdrawValidationResponseModel.


        :param _date: The _date of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :type: int
        """

        self.__date = _date

    @property
    def precision(self):
        """Gets the precision of this CryptoWithdrawValidationResponseModel.  # noqa: E501


        :return: The precision of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this CryptoWithdrawValidationResponseModel.


        :param precision: The precision of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :type: int
        """

        self._precision = precision

    @property
    def confirm_required(self):
        """Gets the confirm_required of this CryptoWithdrawValidationResponseModel.  # noqa: E501


        :return: The confirm_required of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :rtype: bool
        """
        return self._confirm_required

    @confirm_required.setter
    def confirm_required(self, confirm_required):
        """Sets the confirm_required of this CryptoWithdrawValidationResponseModel.


        :param confirm_required: The confirm_required of this CryptoWithdrawValidationResponseModel.  # noqa: E501
        :type: bool
        """

        self._confirm_required = confirm_required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CryptoWithdrawValidationResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CryptoWithdrawValidationResponseModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
