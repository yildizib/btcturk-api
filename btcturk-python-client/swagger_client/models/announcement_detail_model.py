# coding: utf-8

"""
    BtcTurk API 3.0

    White label exchange API documentation.  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: development@btctrader.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnnouncementDetailModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'str',
        'meta_title': 'str',
        'meta_description': 'str',
        'title': 'str',
        'seo_url': 'str',
        'release_date': 'int'
    }

    attribute_map = {
        'content': 'content',
        'meta_title': 'metaTitle',
        'meta_description': 'metaDescription',
        'title': 'title',
        'seo_url': 'seoUrl',
        'release_date': 'releaseDate'
    }

    def __init__(self, content=None, meta_title=None, meta_description=None, title=None, seo_url=None, release_date=None):  # noqa: E501
        """AnnouncementDetailModel - a model defined in Swagger"""  # noqa: E501
        self._content = None
        self._meta_title = None
        self._meta_description = None
        self._title = None
        self._seo_url = None
        self._release_date = None
        self.discriminator = None
        if content is not None:
            self.content = content
        if meta_title is not None:
            self.meta_title = meta_title
        if meta_description is not None:
            self.meta_description = meta_description
        if title is not None:
            self.title = title
        if seo_url is not None:
            self.seo_url = seo_url
        if release_date is not None:
            self.release_date = release_date

    @property
    def content(self):
        """Gets the content of this AnnouncementDetailModel.  # noqa: E501


        :return: The content of this AnnouncementDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this AnnouncementDetailModel.


        :param content: The content of this AnnouncementDetailModel.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def meta_title(self):
        """Gets the meta_title of this AnnouncementDetailModel.  # noqa: E501


        :return: The meta_title of this AnnouncementDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._meta_title

    @meta_title.setter
    def meta_title(self, meta_title):
        """Sets the meta_title of this AnnouncementDetailModel.


        :param meta_title: The meta_title of this AnnouncementDetailModel.  # noqa: E501
        :type: str
        """

        self._meta_title = meta_title

    @property
    def meta_description(self):
        """Gets the meta_description of this AnnouncementDetailModel.  # noqa: E501


        :return: The meta_description of this AnnouncementDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """Sets the meta_description of this AnnouncementDetailModel.


        :param meta_description: The meta_description of this AnnouncementDetailModel.  # noqa: E501
        :type: str
        """

        self._meta_description = meta_description

    @property
    def title(self):
        """Gets the title of this AnnouncementDetailModel.  # noqa: E501


        :return: The title of this AnnouncementDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AnnouncementDetailModel.


        :param title: The title of this AnnouncementDetailModel.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def seo_url(self):
        """Gets the seo_url of this AnnouncementDetailModel.  # noqa: E501


        :return: The seo_url of this AnnouncementDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._seo_url

    @seo_url.setter
    def seo_url(self, seo_url):
        """Sets the seo_url of this AnnouncementDetailModel.


        :param seo_url: The seo_url of this AnnouncementDetailModel.  # noqa: E501
        :type: str
        """

        self._seo_url = seo_url

    @property
    def release_date(self):
        """Gets the release_date of this AnnouncementDetailModel.  # noqa: E501


        :return: The release_date of this AnnouncementDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this AnnouncementDetailModel.


        :param release_date: The release_date of this AnnouncementDetailModel.  # noqa: E501
        :type: int
        """

        self._release_date = release_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnouncementDetailModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnouncementDetailModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
