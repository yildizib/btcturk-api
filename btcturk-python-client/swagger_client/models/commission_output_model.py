# coding: utf-8

"""
    BtcTurk API 3.0

    White label exchange API documentation.  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: development@btctrader.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommissionOutputModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'papara_commissions': 'PaparaCommissionOutputModel',
        'akbank_direkt_commissions': 'AkbankDirektCommissionOutputModel',
        'bank_commissions': 'BankCommissionOutputModel',
        'bank_commission_list': 'list[BankCommissionOutputModel]',
        'crypto_commissions': 'list[CryptoCommissionOutputModel]'
    }

    attribute_map = {
        'papara_commissions': 'paparaCommissions',
        'akbank_direkt_commissions': 'akbankDirektCommissions',
        'bank_commissions': 'bankCommissions',
        'bank_commission_list': 'bankCommissionList',
        'crypto_commissions': 'cryptoCommissions'
    }

    def __init__(self, papara_commissions=None, akbank_direkt_commissions=None, bank_commissions=None, bank_commission_list=None, crypto_commissions=None):  # noqa: E501
        """CommissionOutputModel - a model defined in Swagger"""  # noqa: E501
        self._papara_commissions = None
        self._akbank_direkt_commissions = None
        self._bank_commissions = None
        self._bank_commission_list = None
        self._crypto_commissions = None
        self.discriminator = None
        if papara_commissions is not None:
            self.papara_commissions = papara_commissions
        if akbank_direkt_commissions is not None:
            self.akbank_direkt_commissions = akbank_direkt_commissions
        if bank_commissions is not None:
            self.bank_commissions = bank_commissions
        if bank_commission_list is not None:
            self.bank_commission_list = bank_commission_list
        if crypto_commissions is not None:
            self.crypto_commissions = crypto_commissions

    @property
    def papara_commissions(self):
        """Gets the papara_commissions of this CommissionOutputModel.  # noqa: E501


        :return: The papara_commissions of this CommissionOutputModel.  # noqa: E501
        :rtype: PaparaCommissionOutputModel
        """
        return self._papara_commissions

    @papara_commissions.setter
    def papara_commissions(self, papara_commissions):
        """Sets the papara_commissions of this CommissionOutputModel.


        :param papara_commissions: The papara_commissions of this CommissionOutputModel.  # noqa: E501
        :type: PaparaCommissionOutputModel
        """

        self._papara_commissions = papara_commissions

    @property
    def akbank_direkt_commissions(self):
        """Gets the akbank_direkt_commissions of this CommissionOutputModel.  # noqa: E501


        :return: The akbank_direkt_commissions of this CommissionOutputModel.  # noqa: E501
        :rtype: AkbankDirektCommissionOutputModel
        """
        return self._akbank_direkt_commissions

    @akbank_direkt_commissions.setter
    def akbank_direkt_commissions(self, akbank_direkt_commissions):
        """Sets the akbank_direkt_commissions of this CommissionOutputModel.


        :param akbank_direkt_commissions: The akbank_direkt_commissions of this CommissionOutputModel.  # noqa: E501
        :type: AkbankDirektCommissionOutputModel
        """

        self._akbank_direkt_commissions = akbank_direkt_commissions

    @property
    def bank_commissions(self):
        """Gets the bank_commissions of this CommissionOutputModel.  # noqa: E501


        :return: The bank_commissions of this CommissionOutputModel.  # noqa: E501
        :rtype: BankCommissionOutputModel
        """
        return self._bank_commissions

    @bank_commissions.setter
    def bank_commissions(self, bank_commissions):
        """Sets the bank_commissions of this CommissionOutputModel.


        :param bank_commissions: The bank_commissions of this CommissionOutputModel.  # noqa: E501
        :type: BankCommissionOutputModel
        """

        self._bank_commissions = bank_commissions

    @property
    def bank_commission_list(self):
        """Gets the bank_commission_list of this CommissionOutputModel.  # noqa: E501


        :return: The bank_commission_list of this CommissionOutputModel.  # noqa: E501
        :rtype: list[BankCommissionOutputModel]
        """
        return self._bank_commission_list

    @bank_commission_list.setter
    def bank_commission_list(self, bank_commission_list):
        """Sets the bank_commission_list of this CommissionOutputModel.


        :param bank_commission_list: The bank_commission_list of this CommissionOutputModel.  # noqa: E501
        :type: list[BankCommissionOutputModel]
        """

        self._bank_commission_list = bank_commission_list

    @property
    def crypto_commissions(self):
        """Gets the crypto_commissions of this CommissionOutputModel.  # noqa: E501


        :return: The crypto_commissions of this CommissionOutputModel.  # noqa: E501
        :rtype: list[CryptoCommissionOutputModel]
        """
        return self._crypto_commissions

    @crypto_commissions.setter
    def crypto_commissions(self, crypto_commissions):
        """Sets the crypto_commissions of this CommissionOutputModel.


        :param crypto_commissions: The crypto_commissions of this CommissionOutputModel.  # noqa: E501
        :type: list[CryptoCommissionOutputModel]
        """

        self._crypto_commissions = crypto_commissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommissionOutputModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommissionOutputModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
