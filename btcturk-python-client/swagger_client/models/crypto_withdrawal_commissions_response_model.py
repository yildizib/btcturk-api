# coding: utf-8

"""
    BtcTurk API 3.0

    White label exchange API documentation.  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: development@btctrader.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CryptoWithdrawalCommissionsResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency_name': 'str',
        'currency_symbol': 'str',
        'order': 'int',
        'withdrawal_commissions_models': 'list[WithdrawalCommissionsModel]'
    }

    attribute_map = {
        'currency_name': 'currencyName',
        'currency_symbol': 'currencySymbol',
        'order': 'order',
        'withdrawal_commissions_models': 'withdrawalCommissionsModels'
    }

    def __init__(self, currency_name=None, currency_symbol=None, order=None, withdrawal_commissions_models=None):  # noqa: E501
        """CryptoWithdrawalCommissionsResponseModel - a model defined in Swagger"""  # noqa: E501
        self._currency_name = None
        self._currency_symbol = None
        self._order = None
        self._withdrawal_commissions_models = None
        self.discriminator = None
        if currency_name is not None:
            self.currency_name = currency_name
        if currency_symbol is not None:
            self.currency_symbol = currency_symbol
        if order is not None:
            self.order = order
        if withdrawal_commissions_models is not None:
            self.withdrawal_commissions_models = withdrawal_commissions_models

    @property
    def currency_name(self):
        """Gets the currency_name of this CryptoWithdrawalCommissionsResponseModel.  # noqa: E501


        :return: The currency_name of this CryptoWithdrawalCommissionsResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._currency_name

    @currency_name.setter
    def currency_name(self, currency_name):
        """Sets the currency_name of this CryptoWithdrawalCommissionsResponseModel.


        :param currency_name: The currency_name of this CryptoWithdrawalCommissionsResponseModel.  # noqa: E501
        :type: str
        """

        self._currency_name = currency_name

    @property
    def currency_symbol(self):
        """Gets the currency_symbol of this CryptoWithdrawalCommissionsResponseModel.  # noqa: E501


        :return: The currency_symbol of this CryptoWithdrawalCommissionsResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._currency_symbol

    @currency_symbol.setter
    def currency_symbol(self, currency_symbol):
        """Sets the currency_symbol of this CryptoWithdrawalCommissionsResponseModel.


        :param currency_symbol: The currency_symbol of this CryptoWithdrawalCommissionsResponseModel.  # noqa: E501
        :type: str
        """

        self._currency_symbol = currency_symbol

    @property
    def order(self):
        """Gets the order of this CryptoWithdrawalCommissionsResponseModel.  # noqa: E501


        :return: The order of this CryptoWithdrawalCommissionsResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CryptoWithdrawalCommissionsResponseModel.


        :param order: The order of this CryptoWithdrawalCommissionsResponseModel.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def withdrawal_commissions_models(self):
        """Gets the withdrawal_commissions_models of this CryptoWithdrawalCommissionsResponseModel.  # noqa: E501


        :return: The withdrawal_commissions_models of this CryptoWithdrawalCommissionsResponseModel.  # noqa: E501
        :rtype: list[WithdrawalCommissionsModel]
        """
        return self._withdrawal_commissions_models

    @withdrawal_commissions_models.setter
    def withdrawal_commissions_models(self, withdrawal_commissions_models):
        """Sets the withdrawal_commissions_models of this CryptoWithdrawalCommissionsResponseModel.


        :param withdrawal_commissions_models: The withdrawal_commissions_models of this CryptoWithdrawalCommissionsResponseModel.  # noqa: E501
        :type: list[WithdrawalCommissionsModel]
        """

        self._withdrawal_commissions_models = withdrawal_commissions_models

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CryptoWithdrawalCommissionsResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CryptoWithdrawalCommissionsResponseModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
