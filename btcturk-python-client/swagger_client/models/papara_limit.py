# coding: utf-8

"""
    BtcTurk API 3.0

    White label exchange API documentation.  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: development@btctrader.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaparaLimit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_deposit_fee_amount': 'float',
        'min_deposit_amount': 'float',
        'max_deposit_amount': 'float',
        'min_withdrawal_amounts': 'float',
        'max_withdrawal_fee_amount': 'float',
        'min_withdrawal_per_transaction': 'float'
    }

    attribute_map = {
        'max_deposit_fee_amount': 'maxDepositFeeAmount',
        'min_deposit_amount': 'minDepositAmount',
        'max_deposit_amount': 'maxDepositAmount',
        'min_withdrawal_amounts': 'minWithdrawalAmounts',
        'max_withdrawal_fee_amount': 'maxWithdrawalFeeAmount',
        'min_withdrawal_per_transaction': 'minWithdrawalPerTransaction'
    }

    def __init__(self, max_deposit_fee_amount=None, min_deposit_amount=None, max_deposit_amount=None, min_withdrawal_amounts=None, max_withdrawal_fee_amount=None, min_withdrawal_per_transaction=None):  # noqa: E501
        """PaparaLimit - a model defined in Swagger"""  # noqa: E501
        self._max_deposit_fee_amount = None
        self._min_deposit_amount = None
        self._max_deposit_amount = None
        self._min_withdrawal_amounts = None
        self._max_withdrawal_fee_amount = None
        self._min_withdrawal_per_transaction = None
        self.discriminator = None
        if max_deposit_fee_amount is not None:
            self.max_deposit_fee_amount = max_deposit_fee_amount
        if min_deposit_amount is not None:
            self.min_deposit_amount = min_deposit_amount
        if max_deposit_amount is not None:
            self.max_deposit_amount = max_deposit_amount
        if min_withdrawal_amounts is not None:
            self.min_withdrawal_amounts = min_withdrawal_amounts
        if max_withdrawal_fee_amount is not None:
            self.max_withdrawal_fee_amount = max_withdrawal_fee_amount
        if min_withdrawal_per_transaction is not None:
            self.min_withdrawal_per_transaction = min_withdrawal_per_transaction

    @property
    def max_deposit_fee_amount(self):
        """Gets the max_deposit_fee_amount of this PaparaLimit.  # noqa: E501


        :return: The max_deposit_fee_amount of this PaparaLimit.  # noqa: E501
        :rtype: float
        """
        return self._max_deposit_fee_amount

    @max_deposit_fee_amount.setter
    def max_deposit_fee_amount(self, max_deposit_fee_amount):
        """Sets the max_deposit_fee_amount of this PaparaLimit.


        :param max_deposit_fee_amount: The max_deposit_fee_amount of this PaparaLimit.  # noqa: E501
        :type: float
        """

        self._max_deposit_fee_amount = max_deposit_fee_amount

    @property
    def min_deposit_amount(self):
        """Gets the min_deposit_amount of this PaparaLimit.  # noqa: E501


        :return: The min_deposit_amount of this PaparaLimit.  # noqa: E501
        :rtype: float
        """
        return self._min_deposit_amount

    @min_deposit_amount.setter
    def min_deposit_amount(self, min_deposit_amount):
        """Sets the min_deposit_amount of this PaparaLimit.


        :param min_deposit_amount: The min_deposit_amount of this PaparaLimit.  # noqa: E501
        :type: float
        """

        self._min_deposit_amount = min_deposit_amount

    @property
    def max_deposit_amount(self):
        """Gets the max_deposit_amount of this PaparaLimit.  # noqa: E501


        :return: The max_deposit_amount of this PaparaLimit.  # noqa: E501
        :rtype: float
        """
        return self._max_deposit_amount

    @max_deposit_amount.setter
    def max_deposit_amount(self, max_deposit_amount):
        """Sets the max_deposit_amount of this PaparaLimit.


        :param max_deposit_amount: The max_deposit_amount of this PaparaLimit.  # noqa: E501
        :type: float
        """

        self._max_deposit_amount = max_deposit_amount

    @property
    def min_withdrawal_amounts(self):
        """Gets the min_withdrawal_amounts of this PaparaLimit.  # noqa: E501


        :return: The min_withdrawal_amounts of this PaparaLimit.  # noqa: E501
        :rtype: float
        """
        return self._min_withdrawal_amounts

    @min_withdrawal_amounts.setter
    def min_withdrawal_amounts(self, min_withdrawal_amounts):
        """Sets the min_withdrawal_amounts of this PaparaLimit.


        :param min_withdrawal_amounts: The min_withdrawal_amounts of this PaparaLimit.  # noqa: E501
        :type: float
        """

        self._min_withdrawal_amounts = min_withdrawal_amounts

    @property
    def max_withdrawal_fee_amount(self):
        """Gets the max_withdrawal_fee_amount of this PaparaLimit.  # noqa: E501


        :return: The max_withdrawal_fee_amount of this PaparaLimit.  # noqa: E501
        :rtype: float
        """
        return self._max_withdrawal_fee_amount

    @max_withdrawal_fee_amount.setter
    def max_withdrawal_fee_amount(self, max_withdrawal_fee_amount):
        """Sets the max_withdrawal_fee_amount of this PaparaLimit.


        :param max_withdrawal_fee_amount: The max_withdrawal_fee_amount of this PaparaLimit.  # noqa: E501
        :type: float
        """

        self._max_withdrawal_fee_amount = max_withdrawal_fee_amount

    @property
    def min_withdrawal_per_transaction(self):
        """Gets the min_withdrawal_per_transaction of this PaparaLimit.  # noqa: E501


        :return: The min_withdrawal_per_transaction of this PaparaLimit.  # noqa: E501
        :rtype: float
        """
        return self._min_withdrawal_per_transaction

    @min_withdrawal_per_transaction.setter
    def min_withdrawal_per_transaction(self, min_withdrawal_per_transaction):
        """Sets the min_withdrawal_per_transaction of this PaparaLimit.


        :param min_withdrawal_per_transaction: The min_withdrawal_per_transaction of this PaparaLimit.  # noqa: E501
        :type: float
        """

        self._min_withdrawal_per_transaction = min_withdrawal_per_transaction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaparaLimit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaparaLimit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
