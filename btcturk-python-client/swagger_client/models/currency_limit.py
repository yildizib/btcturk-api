# coding: utf-8

"""
    BtcTurk API 3.0

    White label exchange API documentation.  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: development@btctrader.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CurrencyLimit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'name': 'str',
        'min_deposit': 'float',
        'min_withdrawal': 'float',
        'level_limits': 'LevelLimits',
        'type': 'CurrencyType',
        'order': 'int'
    }

    attribute_map = {
        'symbol': 'symbol',
        'name': 'name',
        'min_deposit': 'minDeposit',
        'min_withdrawal': 'minWithdrawal',
        'level_limits': 'levelLimits',
        'type': 'type',
        'order': 'order'
    }

    def __init__(self, symbol=None, name=None, min_deposit=None, min_withdrawal=None, level_limits=None, type=None, order=None):  # noqa: E501
        """CurrencyLimit - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._name = None
        self._min_deposit = None
        self._min_withdrawal = None
        self._level_limits = None
        self._type = None
        self._order = None
        self.discriminator = None
        if symbol is not None:
            self.symbol = symbol
        if name is not None:
            self.name = name
        if min_deposit is not None:
            self.min_deposit = min_deposit
        if min_withdrawal is not None:
            self.min_withdrawal = min_withdrawal
        if level_limits is not None:
            self.level_limits = level_limits
        if type is not None:
            self.type = type
        if order is not None:
            self.order = order

    @property
    def symbol(self):
        """Gets the symbol of this CurrencyLimit.  # noqa: E501


        :return: The symbol of this CurrencyLimit.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this CurrencyLimit.


        :param symbol: The symbol of this CurrencyLimit.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def name(self):
        """Gets the name of this CurrencyLimit.  # noqa: E501


        :return: The name of this CurrencyLimit.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CurrencyLimit.


        :param name: The name of this CurrencyLimit.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def min_deposit(self):
        """Gets the min_deposit of this CurrencyLimit.  # noqa: E501


        :return: The min_deposit of this CurrencyLimit.  # noqa: E501
        :rtype: float
        """
        return self._min_deposit

    @min_deposit.setter
    def min_deposit(self, min_deposit):
        """Sets the min_deposit of this CurrencyLimit.


        :param min_deposit: The min_deposit of this CurrencyLimit.  # noqa: E501
        :type: float
        """

        self._min_deposit = min_deposit

    @property
    def min_withdrawal(self):
        """Gets the min_withdrawal of this CurrencyLimit.  # noqa: E501


        :return: The min_withdrawal of this CurrencyLimit.  # noqa: E501
        :rtype: float
        """
        return self._min_withdrawal

    @min_withdrawal.setter
    def min_withdrawal(self, min_withdrawal):
        """Sets the min_withdrawal of this CurrencyLimit.


        :param min_withdrawal: The min_withdrawal of this CurrencyLimit.  # noqa: E501
        :type: float
        """

        self._min_withdrawal = min_withdrawal

    @property
    def level_limits(self):
        """Gets the level_limits of this CurrencyLimit.  # noqa: E501


        :return: The level_limits of this CurrencyLimit.  # noqa: E501
        :rtype: LevelLimits
        """
        return self._level_limits

    @level_limits.setter
    def level_limits(self, level_limits):
        """Sets the level_limits of this CurrencyLimit.


        :param level_limits: The level_limits of this CurrencyLimit.  # noqa: E501
        :type: LevelLimits
        """

        self._level_limits = level_limits

    @property
    def type(self):
        """Gets the type of this CurrencyLimit.  # noqa: E501


        :return: The type of this CurrencyLimit.  # noqa: E501
        :rtype: CurrencyType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CurrencyLimit.


        :param type: The type of this CurrencyLimit.  # noqa: E501
        :type: CurrencyType
        """

        self._type = type

    @property
    def order(self):
        """Gets the order of this CurrencyLimit.  # noqa: E501


        :return: The order of this CurrencyLimit.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CurrencyLimit.


        :param order: The order of this CurrencyLimit.  # noqa: E501
        :type: int
        """

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrencyLimit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrencyLimit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
