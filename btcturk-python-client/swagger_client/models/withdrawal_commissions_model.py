# coding: utf-8

"""
    BtcTurk API 3.0

    White label exchange API documentation.  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: development@btctrader.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WithdrawalCommissionsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crypto_channel_name': 'str',
        'commission_type': 'CommissionType',
        'currency_precision': 'int',
        'fee_value': 'float'
    }

    attribute_map = {
        'crypto_channel_name': 'cryptoChannelName',
        'commission_type': 'commissionType',
        'currency_precision': 'currencyPrecision',
        'fee_value': 'feeValue'
    }

    def __init__(self, crypto_channel_name=None, commission_type=None, currency_precision=None, fee_value=None):  # noqa: E501
        """WithdrawalCommissionsModel - a model defined in Swagger"""  # noqa: E501
        self._crypto_channel_name = None
        self._commission_type = None
        self._currency_precision = None
        self._fee_value = None
        self.discriminator = None
        if crypto_channel_name is not None:
            self.crypto_channel_name = crypto_channel_name
        if commission_type is not None:
            self.commission_type = commission_type
        if currency_precision is not None:
            self.currency_precision = currency_precision
        if fee_value is not None:
            self.fee_value = fee_value

    @property
    def crypto_channel_name(self):
        """Gets the crypto_channel_name of this WithdrawalCommissionsModel.  # noqa: E501


        :return: The crypto_channel_name of this WithdrawalCommissionsModel.  # noqa: E501
        :rtype: str
        """
        return self._crypto_channel_name

    @crypto_channel_name.setter
    def crypto_channel_name(self, crypto_channel_name):
        """Sets the crypto_channel_name of this WithdrawalCommissionsModel.


        :param crypto_channel_name: The crypto_channel_name of this WithdrawalCommissionsModel.  # noqa: E501
        :type: str
        """

        self._crypto_channel_name = crypto_channel_name

    @property
    def commission_type(self):
        """Gets the commission_type of this WithdrawalCommissionsModel.  # noqa: E501


        :return: The commission_type of this WithdrawalCommissionsModel.  # noqa: E501
        :rtype: CommissionType
        """
        return self._commission_type

    @commission_type.setter
    def commission_type(self, commission_type):
        """Sets the commission_type of this WithdrawalCommissionsModel.


        :param commission_type: The commission_type of this WithdrawalCommissionsModel.  # noqa: E501
        :type: CommissionType
        """

        self._commission_type = commission_type

    @property
    def currency_precision(self):
        """Gets the currency_precision of this WithdrawalCommissionsModel.  # noqa: E501


        :return: The currency_precision of this WithdrawalCommissionsModel.  # noqa: E501
        :rtype: int
        """
        return self._currency_precision

    @currency_precision.setter
    def currency_precision(self, currency_precision):
        """Sets the currency_precision of this WithdrawalCommissionsModel.


        :param currency_precision: The currency_precision of this WithdrawalCommissionsModel.  # noqa: E501
        :type: int
        """

        self._currency_precision = currency_precision

    @property
    def fee_value(self):
        """Gets the fee_value of this WithdrawalCommissionsModel.  # noqa: E501


        :return: The fee_value of this WithdrawalCommissionsModel.  # noqa: E501
        :rtype: float
        """
        return self._fee_value

    @fee_value.setter
    def fee_value(self, fee_value):
        """Sets the fee_value of this WithdrawalCommissionsModel.


        :param fee_value: The fee_value of this WithdrawalCommissionsModel.  # noqa: E501
        :type: float
        """

        self._fee_value = fee_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WithdrawalCommissionsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WithdrawalCommissionsModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
