# coding: utf-8

"""
    BtcTurk API 3.0

    White label exchange API documentation.  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: development@btctrader.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MobileSettingModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'language_settings': 'LanguageSettingModel',
        'rating': 'bool',
        'euro_ıs_enable': 'bool',
        'country_code': 'str'
    }

    attribute_map = {
        'language_settings': 'languageSettings',
        'rating': 'rating',
        'euro_ıs_enable': 'euroIsEnable',
        'country_code': 'countryCode'
    }

    def __init__(self, language_settings=None, rating=None, euro_ıs_enable=None, country_code=None):  # noqa: E501
        """MobileSettingModel - a model defined in Swagger"""  # noqa: E501
        self._language_settings = None
        self._rating = None
        self._euro_ıs_enable = None
        self._country_code = None
        self.discriminator = None
        if language_settings is not None:
            self.language_settings = language_settings
        if rating is not None:
            self.rating = rating
        if euro_ıs_enable is not None:
            self.euro_ıs_enable = euro_ıs_enable
        if country_code is not None:
            self.country_code = country_code

    @property
    def language_settings(self):
        """Gets the language_settings of this MobileSettingModel.  # noqa: E501


        :return: The language_settings of this MobileSettingModel.  # noqa: E501
        :rtype: LanguageSettingModel
        """
        return self._language_settings

    @language_settings.setter
    def language_settings(self, language_settings):
        """Sets the language_settings of this MobileSettingModel.


        :param language_settings: The language_settings of this MobileSettingModel.  # noqa: E501
        :type: LanguageSettingModel
        """

        self._language_settings = language_settings

    @property
    def rating(self):
        """Gets the rating of this MobileSettingModel.  # noqa: E501


        :return: The rating of this MobileSettingModel.  # noqa: E501
        :rtype: bool
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this MobileSettingModel.


        :param rating: The rating of this MobileSettingModel.  # noqa: E501
        :type: bool
        """

        self._rating = rating

    @property
    def euro_ıs_enable(self):
        """Gets the euro_ıs_enable of this MobileSettingModel.  # noqa: E501


        :return: The euro_ıs_enable of this MobileSettingModel.  # noqa: E501
        :rtype: bool
        """
        return self._euro_ıs_enable

    @euro_ıs_enable.setter
    def euro_ıs_enable(self, euro_ıs_enable):
        """Sets the euro_ıs_enable of this MobileSettingModel.


        :param euro_ıs_enable: The euro_ıs_enable of this MobileSettingModel.  # noqa: E501
        :type: bool
        """

        self._euro_ıs_enable = euro_ıs_enable

    @property
    def country_code(self):
        """Gets the country_code of this MobileSettingModel.  # noqa: E501


        :return: The country_code of this MobileSettingModel.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this MobileSettingModel.


        :param country_code: The country_code of this MobileSettingModel.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MobileSettingModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MobileSettingModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
